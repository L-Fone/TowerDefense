// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage0.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ET {

  #region Enums
  public enum ItemType {
    NoneItem = 0,
    EquipItem = 1,
    GoodsItem = 2,
    MaterialsItem = 3,
  }

  public enum CampType {
    NoneCamp = 0,
    /// <summary>
    ///开拓者
    /// </summary>
    Pioneer = 1,
    /// <summary>
    ///守护者
    /// </summary>
    Guardian = 2,
  }

  public enum JobType {
    UnKnown = 0,
    Officer = 1,
    Sportsman = 2,
    Nurse = 3,
    Superman = 4,
  }

  public enum SexType {
    Male = 0,
    Famale = 1,
  }

  #endregion

  #region Messages
  public partial class BagMap : pb::IMessage {
    private static readonly pb::MessageParser<BagMap> _parser = new pb::MessageParser<BagMap>(() => (BagMap)MessagePool.Instance.Fetch(typeof(BagMap)));
    public static pb::MessageParser<BagMap> Parser { get { return _parser; } }

    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    private global::ET.Item item_;
    public global::ET.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    private global::ET.EquipTransMessage equipTransMessage_;
    public global::ET.EquipTransMessage EquipTransMessage {
      get { return equipTransMessage_; }
      set {
        equipTransMessage_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
      if (equipTransMessage_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EquipTransMessage);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (equipTransMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquipTransMessage);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      index_ = 0;
      if (item_ != null) MessagePool.Instance.Recycle(item_); item_ = null;
      if (equipTransMessage_ != null) MessagePool.Instance.Recycle(equipTransMessage_); equipTransMessage_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::ET.Item();
            }
            input.ReadMessage(item_);
            break;
          }
          case 26: {
            if (equipTransMessage_ == null) {
              equipTransMessage_ = new global::ET.EquipTransMessage();
            }
            input.ReadMessage(equipTransMessage_);
            break;
          }
        }
      }
    }

  }

  public partial class Item : pb::IMessage {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => (Item)MessagePool.Instance.Fetch(typeof(Item)));
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    private int itemId_;
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private global::ET.ItemType itemType_ = 0;
    public global::ET.ItemType ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    private long serverId_;
    public long ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private bool isLock_;
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ItemType);
      }
      if (ServerId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ServerId);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Count);
      }
      if (IsLock != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsLock);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemType);
      }
      if (ServerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      itemId_ = 0;
      serverId_ = 0;
      count_ = 0;
      isLock_ = false;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            itemType_ = (global::ET.ItemType) input.ReadEnum();
            break;
          }
          case 24: {
            ServerId = input.ReadInt64();
            break;
          }
          case 32: {
            Count = input.ReadInt32();
            break;
          }
          case 40: {
            IsLock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public partial class _UnitCharacter : pb::IMessage {
    private static readonly pb::MessageParser<_UnitCharacter> _parser = new pb::MessageParser<_UnitCharacter>(() => (_UnitCharacter)MessagePool.Instance.Fetch(typeof(_UnitCharacter)));

    public static pb::MessageParser<_UnitCharacter> Parser { get { return _parser; } }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private string nickName_ = "";
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int jobId_;
    public int JobId {
      get { return jobId_; }
      set {
        jobId_ = value;
      }
    }

    private string title_ = "";
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ET.CampType campType_ = 0;
    public global::ET.CampType CampType {
      get { return campType_; }
      set {
        campType_ = value;
      }
    }

    private string family_ = "";
    public string Family {
      get { return family_; }
      set {
        family_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long exp_;
    public long Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    private int skinId_;
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int honor_;
    /// <summary>
    ///荣誉
    /// </summary>
    public int Honor {
      get { return honor_; }
      set {
        honor_ = value;
      }
    }

    private int hp_;
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int maxHp_;
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    private int mp_;
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    private int maxMp_;
    public int MaxMp {
      get { return maxMp_; }
      set {
        maxMp_ = value;
      }
    }

    private int transLevel_;
    /// <summary>
    ///转生等级
    /// </summary>
    public int TransLevel {
      get { return transLevel_; }
      set {
        transLevel_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_point_codec
        = pb::FieldCodec.ForInt32(138);
    private pbc::RepeatedField<int> point_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Point {
      get { return point_; }
      set { point_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (JobId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(JobId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Title);
      }
      if (CampType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) CampType);
      }
      if (Family.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Family);
      }
      if (Exp != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Exp);
      }
      if (SkinId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SkinId);
      }
      if (Level != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Level);
      }
      if (Honor != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Honor);
      }
      if (Hp != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Hp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MaxHp);
      }
      if (Mp != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Mp);
      }
      if (MaxMp != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MaxMp);
      }
      if (TransLevel != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(TransLevel);
      }
      point_.WriteTo(output, _repeated_point_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (JobId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JobId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (CampType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CampType);
      }
      if (Family.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Family);
      }
      if (Exp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Exp);
      }
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Honor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Honor);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (MaxMp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMp);
      }
      if (TransLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TransLevel);
      }
      size += point_.CalculateSize(_repeated_point_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      nickName_ = "";
      jobId_ = 0;
      title_ = "";
      family_ = "";
      exp_ = 0;
      skinId_ = 0;
      level_ = 0;
      honor_ = 0;
      hp_ = 0;
      maxHp_ = 0;
      mp_ = 0;
      maxMp_ = 0;
      transLevel_ = 0;
      point_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 32: {
            JobId = input.ReadInt32();
            break;
          }
          case 42: {
            Title = input.ReadString();
            break;
          }
          case 48: {
            campType_ = (global::ET.CampType) input.ReadEnum();
            break;
          }
          case 58: {
            Family = input.ReadString();
            break;
          }
          case 64: {
            Exp = input.ReadInt64();
            break;
          }
          case 72: {
            SkinId = input.ReadInt32();
            break;
          }
          case 80: {
            Level = input.ReadInt32();
            break;
          }
          case 88: {
            Honor = input.ReadInt32();
            break;
          }
          case 96: {
            Hp = input.ReadInt32();
            break;
          }
          case 104: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 112: {
            Mp = input.ReadInt32();
            break;
          }
          case 120: {
            MaxMp = input.ReadInt32();
            break;
          }
          case 128: {
            TransLevel = input.ReadInt32();
            break;
          }
          case 138:
          case 136: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
        }
      }
    }

  }

  public partial class UnitCommonCharacter : pb::IMessage {
    private static readonly pb::MessageParser<UnitCommonCharacter> _parser = new pb::MessageParser<UnitCommonCharacter>(() => (UnitCommonCharacter)MessagePool.Instance.Fetch(typeof(UnitCommonCharacter)));
    public static pb::MessageParser<UnitCommonCharacter> Parser { get { return _parser; } }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private string nickName_ = "";
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int jobId_;
    public int JobId {
      get { return jobId_; }
      set {
        jobId_ = value;
      }
    }

    private string title_ = "";
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string family_ = "";
    public string Family {
      get { return family_; }
      set {
        family_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int skinId_;
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int hp_;
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int maxHp_;
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    private int mp_;
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    private int maxMp_;
    public int MaxMp {
      get { return maxMp_; }
      set {
        maxMp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (JobId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(JobId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Title);
      }
      if (Family.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Family);
      }
      if (SkinId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SkinId);
      }
      if (Level != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Level);
      }
      if (Hp != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Hp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MaxHp);
      }
      if (Mp != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Mp);
      }
      if (MaxMp != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(MaxMp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (JobId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JobId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Family.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Family);
      }
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (MaxMp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      nickName_ = "";
      jobId_ = 0;
      title_ = "";
      family_ = "";
      skinId_ = 0;
      level_ = 0;
      hp_ = 0;
      maxHp_ = 0;
      mp_ = 0;
      maxMp_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 32: {
            JobId = input.ReadInt32();
            break;
          }
          case 42: {
            Title = input.ReadString();
            break;
          }
          case 58: {
            Family = input.ReadString();
            break;
          }
          case 72: {
            SkinId = input.ReadInt32();
            break;
          }
          case 80: {
            Level = input.ReadInt32();
            break;
          }
          case 96: {
            Hp = input.ReadInt32();
            break;
          }
          case 104: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 112: {
            Mp = input.ReadInt32();
            break;
          }
          case 120: {
            MaxMp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗属性
  /// </summary>
  public partial class BattleCharacter : pb::IMessage {
    private static readonly pb::MessageParser<BattleCharacter> _parser = new pb::MessageParser<BattleCharacter>(() => (BattleCharacter)MessagePool.Instance.Fetch(typeof(BattleCharacter)));
    public static pb::MessageParser<BattleCharacter> Parser { get { return _parser; } }

    private int str_;
    /// <summary>
    ///力量
    /// </summary>
    public int Str {
      get { return str_; }
      set {
        str_ = value;
      }
    }

    private int quk_;
    /// <summary>
    ///敏捷
    /// </summary>
    public int Quk {
      get { return quk_; }
      set {
        quk_ = value;
      }
    }

    private int spi_;
    /// <summary>
    ///精神
    /// </summary>
    public int Spi {
      get { return spi_; }
      set {
        spi_ = value;
      }
    }

    private int wim_;
    /// <summary>
    ///智慧
    /// </summary>
    public int Wim {
      get { return wim_; }
      set {
        wim_ = value;
      }
    }

    private int phy_;
    /// <summary>
    ///体质
    /// </summary>
    public int Phy {
      get { return phy_; }
      set {
        phy_ = value;
      }
    }

    private int sta_;
    /// <summary>
    ///耐力
    /// </summary>
    public int Sta {
      get { return sta_; }
      set {
        sta_ = value;
      }
    }

    private int phyAtk_;
    public int PhyAtk {
      get { return phyAtk_; }
      set {
        phyAtk_ = value;
      }
    }

    private int phyDef_;
    public int PhyDef {
      get { return phyDef_; }
      set {
        phyDef_ = value;
      }
    }

    private int spiAtk_;
    public int SpiAtk {
      get { return spiAtk_; }
      set {
        spiAtk_ = value;
      }
    }

    private int spiDef_;
    public int SpiDef {
      get { return spiDef_; }
      set {
        spiDef_ = value;
      }
    }

    private float dvo_;
    /// <summary>
    ///辅助值
    /// </summary>
    public float Dvo {
      get { return dvo_; }
      set {
        dvo_ = value;
      }
    }

    private float pcrir_;
    /// <summary>
    ///物理暴击率
    /// </summary>
    public float Pcrir {
      get { return pcrir_; }
      set {
        pcrir_ = value;
      }
    }

    private float rpcrir_;
    /// <summary>
    ///抗物理暴击率
    /// </summary>
    public float Rpcrir {
      get { return rpcrir_; }
      set {
        rpcrir_ = value;
      }
    }

    private float pcri_;
    /// <summary>
    ///物理暴击伤害
    /// </summary>
    public float Pcri {
      get { return pcri_; }
      set {
        pcri_ = value;
      }
    }

    private float rpcri_;
    /// <summary>
    ///抗物理暴击伤害
    /// </summary>
    public float Rpcri {
      get { return rpcri_; }
      set {
        rpcri_ = value;
      }
    }

    private float mcrir_;
    /// <summary>
    ///精神暴击率
    /// </summary>
    public float Mcrir {
      get { return mcrir_; }
      set {
        mcrir_ = value;
      }
    }

    private float rmcrir_;
    /// <summary>
    ///抗精神暴击率
    /// </summary>
    public float Rmcrir {
      get { return rmcrir_; }
      set {
        rmcrir_ = value;
      }
    }

    private float mcri_;
    /// <summary>
    ///精神暴击伤害
    /// </summary>
    public float Mcri {
      get { return mcri_; }
      set {
        mcri_ = value;
      }
    }

    private float rmcri_;
    /// <summary>
    ///抗精神暴击伤害
    /// </summary>
    public float Rmcri {
      get { return rmcri_; }
      set {
        rmcri_ = value;
      }
    }

    private float nphyi_;
    /// <summary>
    ///物理免伤
    /// </summary>
    public float Nphyi {
      get { return nphyi_; }
      set {
        nphyi_ = value;
      }
    }

    private float nmeni_;
    /// <summary>
    ///精神免伤
    /// </summary>
    public float Nmeni {
      get { return nmeni_; }
      set {
        nmeni_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Str != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Str);
      }
      if (Quk != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Quk);
      }
      if (Spi != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Spi);
      }
      if (Wim != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Wim);
      }
      if (PhyAtk != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PhyAtk);
      }
      if (PhyDef != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PhyDef);
      }
      if (SpiAtk != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SpiAtk);
      }
      if (SpiDef != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SpiDef);
      }
      if (Dvo != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Dvo);
      }
      if (Pcrir != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Pcrir);
      }
      if (Rpcrir != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(Rpcrir);
      }
      if (Pcri != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Pcri);
      }
      if (Rpcri != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(Rpcri);
      }
      if (Mcrir != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(Mcrir);
      }
      if (Rmcrir != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(Rmcrir);
      }
      if (Mcri != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(Mcri);
      }
      if (Rmcri != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(Rmcri);
      }
      if (Nphyi != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(Nphyi);
      }
      if (Nmeni != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(Nmeni);
      }
      if (Phy != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(Phy);
      }
      if (Sta != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(Sta);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Str != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Str);
      }
      if (Quk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quk);
      }
      if (Spi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Spi);
      }
      if (Wim != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wim);
      }
      if (Phy != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Phy);
      }
      if (Sta != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Sta);
      }
      if (PhyAtk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhyAtk);
      }
      if (PhyDef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhyDef);
      }
      if (SpiAtk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpiAtk);
      }
      if (SpiDef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpiDef);
      }
      if (Dvo != 0F) {
        size += 1 + 4;
      }
      if (Pcrir != 0F) {
        size += 2 + 4;
      }
      if (Rpcrir != 0F) {
        size += 2 + 4;
      }
      if (Pcri != 0F) {
        size += 2 + 4;
      }
      if (Rpcri != 0F) {
        size += 2 + 4;
      }
      if (Mcrir != 0F) {
        size += 2 + 4;
      }
      if (Rmcrir != 0F) {
        size += 2 + 4;
      }
      if (Mcri != 0F) {
        size += 2 + 4;
      }
      if (Rmcri != 0F) {
        size += 2 + 4;
      }
      if (Nphyi != 0F) {
        size += 2 + 4;
      }
      if (Nmeni != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      str_ = 0;
      quk_ = 0;
      spi_ = 0;
      wim_ = 0;
      phyAtk_ = 0;
      phyDef_ = 0;
      spiAtk_ = 0;
      spiDef_ = 0;
      dvo_ = 0f;
      pcrir_ = 0f;
      rpcrir_ = 0f;
      pcri_ = 0f;
      rpcri_ = 0f;
      mcrir_ = 0f;
      rmcrir_ = 0f;
      mcri_ = 0f;
      rmcri_ = 0f;
      nphyi_ = 0f;
      nmeni_ = 0f;
      phy_ = 0;
      sta_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 56: {
            Str = input.ReadInt32();
            break;
          }
          case 64: {
            Quk = input.ReadInt32();
            break;
          }
          case 72: {
            Spi = input.ReadInt32();
            break;
          }
          case 80: {
            Wim = input.ReadInt32();
            break;
          }
          case 88: {
            PhyAtk = input.ReadInt32();
            break;
          }
          case 96: {
            PhyDef = input.ReadInt32();
            break;
          }
          case 104: {
            SpiAtk = input.ReadInt32();
            break;
          }
          case 112: {
            SpiDef = input.ReadInt32();
            break;
          }
          case 125: {
            Dvo = input.ReadFloat();
            break;
          }
          case 133: {
            Pcrir = input.ReadFloat();
            break;
          }
          case 141: {
            Rpcrir = input.ReadFloat();
            break;
          }
          case 149: {
            Pcri = input.ReadFloat();
            break;
          }
          case 157: {
            Rpcri = input.ReadFloat();
            break;
          }
          case 165: {
            Mcrir = input.ReadFloat();
            break;
          }
          case 173: {
            Rmcrir = input.ReadFloat();
            break;
          }
          case 181: {
            Mcri = input.ReadFloat();
            break;
          }
          case 189: {
            Rmcri = input.ReadFloat();
            break;
          }
          case 197: {
            Nphyi = input.ReadFloat();
            break;
          }
          case 205: {
            Nmeni = input.ReadFloat();
            break;
          }
          case 216: {
            Phy = input.ReadInt32();
            break;
          }
          case 224: {
            Sta = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class EquipTransMessage : pb::IMessage {
    private static readonly pb::MessageParser<EquipTransMessage> _parser = new pb::MessageParser<EquipTransMessage>(() => (EquipTransMessage)MessagePool.Instance.Fetch(typeof(EquipTransMessage)));
    public static pb::MessageParser<EquipTransMessage> Parser { get { return _parser; } }

    private int equipId_;
    public int EquipId {
      get { return equipId_; }
      set {
        equipId_ = value;
      }
    }

    private bool isLocked_;
    public bool IsLocked {
      get { return isLocked_; }
      set {
        isLocked_ = value;
      }
    }

    private int maxHp_;
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    private int maxMp_;
    public int MaxMp {
      get { return maxMp_; }
      set {
        maxMp_ = value;
      }
    }

    private int str_;
    /// <summary>
    ///力量
    /// </summary>
    public int Str {
      get { return str_; }
      set {
        str_ = value;
      }
    }

    private int quk_;
    /// <summary>
    ///敏捷
    /// </summary>
    public int Quk {
      get { return quk_; }
      set {
        quk_ = value;
      }
    }

    private int spi_;
    /// <summary>
    ///精神
    /// </summary>
    public int Spi {
      get { return spi_; }
      set {
        spi_ = value;
      }
    }

    private int wim_;
    /// <summary>
    ///智慧
    /// </summary>
    public int Wim {
      get { return wim_; }
      set {
        wim_ = value;
      }
    }

    private int phyAtk_;
    public int PhyAtk {
      get { return phyAtk_; }
      set {
        phyAtk_ = value;
      }
    }

    private int phyDef_;
    public int PhyDef {
      get { return phyDef_; }
      set {
        phyDef_ = value;
      }
    }

    private int spiAtk_;
    public int SpiAtk {
      get { return spiAtk_; }
      set {
        spiAtk_ = value;
      }
    }

    private int spiDef_;
    public int SpiDef {
      get { return spiDef_; }
      set {
        spiDef_ = value;
      }
    }

    private float dvo_;
    /// <summary>
    ///辅助值
    /// </summary>
    public float Dvo {
      get { return dvo_; }
      set {
        dvo_ = value;
      }
    }

    private float pcrir_;
    /// <summary>
    ///物理暴击率
    /// </summary>
    public float Pcrir {
      get { return pcrir_; }
      set {
        pcrir_ = value;
      }
    }

    private float rpcrir_;
    /// <summary>
    ///抗物理暴击率
    /// </summary>
    public float Rpcrir {
      get { return rpcrir_; }
      set {
        rpcrir_ = value;
      }
    }

    private float pcri_;
    /// <summary>
    ///物理暴击伤害
    /// </summary>
    public float Pcri {
      get { return pcri_; }
      set {
        pcri_ = value;
      }
    }

    private float rpcri_;
    /// <summary>
    ///抗物理暴击伤害
    /// </summary>
    public float Rpcri {
      get { return rpcri_; }
      set {
        rpcri_ = value;
      }
    }

    private float mcrir_;
    /// <summary>
    ///精神暴击率
    /// </summary>
    public float Mcrir {
      get { return mcrir_; }
      set {
        mcrir_ = value;
      }
    }

    private float rmcrir_;
    /// <summary>
    ///抗精神暴击率
    /// </summary>
    public float Rmcrir {
      get { return rmcrir_; }
      set {
        rmcrir_ = value;
      }
    }

    private float mcri_;
    /// <summary>
    ///精神暴击伤害
    /// </summary>
    public float Mcri {
      get { return mcri_; }
      set {
        mcri_ = value;
      }
    }

    private float rmcri_;
    /// <summary>
    ///抗精神暴击伤害
    /// </summary>
    public float Rmcri {
      get { return rmcri_; }
      set {
        rmcri_ = value;
      }
    }

    private float nphyi_;
    /// <summary>
    ///物理免伤
    /// </summary>
    public float Nphyi {
      get { return nphyi_; }
      set {
        nphyi_ = value;
      }
    }

    private float nmeni_;
    /// <summary>
    ///精神免伤
    /// </summary>
    public float Nmeni {
      get { return nmeni_; }
      set {
        nmeni_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_gemList_codec
        = pb::FieldCodec.ForInt32(210);
    private pbc::RepeatedField<int> gemList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///镶嵌的宝石
    /// </summary>
    public pbc::RepeatedField<int> GemList {
      get { return gemList_; }
      set { gemList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EquipId);
      }
      if (IsLocked != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsLocked);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxHp);
      }
      if (MaxMp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxMp);
      }
      if (Str != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Str);
      }
      if (Quk != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Quk);
      }
      if (Spi != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Spi);
      }
      if (Wim != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Wim);
      }
      if (PhyAtk != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(PhyAtk);
      }
      if (PhyDef != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(PhyDef);
      }
      if (SpiAtk != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SpiAtk);
      }
      if (SpiDef != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SpiDef);
      }
      if (Dvo != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Dvo);
      }
      if (Pcrir != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Pcrir);
      }
      if (Rpcrir != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(Rpcrir);
      }
      if (Pcri != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Pcri);
      }
      if (Rpcri != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(Rpcri);
      }
      if (Mcrir != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(Mcrir);
      }
      if (Rmcrir != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(Rmcrir);
      }
      if (Mcri != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(Mcri);
      }
      if (Rmcri != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(Rmcri);
      }
      if (Nphyi != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(Nphyi);
      }
      if (Nmeni != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(Nmeni);
      }
      gemList_.WriteTo(output, _repeated_gemList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (EquipId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipId);
      }
      if (IsLocked != false) {
        size += 1 + 1;
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (MaxMp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMp);
      }
      if (Str != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Str);
      }
      if (Quk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quk);
      }
      if (Spi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Spi);
      }
      if (Wim != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wim);
      }
      if (PhyAtk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhyAtk);
      }
      if (PhyDef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhyDef);
      }
      if (SpiAtk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpiAtk);
      }
      if (SpiDef != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpiDef);
      }
      if (Dvo != 0F) {
        size += 1 + 4;
      }
      if (Pcrir != 0F) {
        size += 2 + 4;
      }
      if (Rpcrir != 0F) {
        size += 2 + 4;
      }
      if (Pcri != 0F) {
        size += 2 + 4;
      }
      if (Rpcri != 0F) {
        size += 2 + 4;
      }
      if (Mcrir != 0F) {
        size += 2 + 4;
      }
      if (Rmcrir != 0F) {
        size += 2 + 4;
      }
      if (Mcri != 0F) {
        size += 2 + 4;
      }
      if (Rmcri != 0F) {
        size += 2 + 4;
      }
      if (Nphyi != 0F) {
        size += 2 + 4;
      }
      if (Nmeni != 0F) {
        size += 2 + 4;
      }
      size += gemList_.CalculateSize(_repeated_gemList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      equipId_ = 0;
      isLocked_ = false;
      maxHp_ = 0;
      maxMp_ = 0;
      str_ = 0;
      quk_ = 0;
      spi_ = 0;
      wim_ = 0;
      phyAtk_ = 0;
      phyDef_ = 0;
      spiAtk_ = 0;
      spiDef_ = 0;
      dvo_ = 0f;
      pcrir_ = 0f;
      rpcrir_ = 0f;
      pcri_ = 0f;
      rpcri_ = 0f;
      mcrir_ = 0f;
      rmcrir_ = 0f;
      mcri_ = 0f;
      rmcri_ = 0f;
      nphyi_ = 0f;
      nmeni_ = 0f;
      gemList_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipId = input.ReadInt32();
            break;
          }
          case 32: {
            IsLocked = input.ReadBool();
            break;
          }
          case 40: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 48: {
            MaxMp = input.ReadInt32();
            break;
          }
          case 56: {
            Str = input.ReadInt32();
            break;
          }
          case 64: {
            Quk = input.ReadInt32();
            break;
          }
          case 72: {
            Spi = input.ReadInt32();
            break;
          }
          case 80: {
            Wim = input.ReadInt32();
            break;
          }
          case 88: {
            PhyAtk = input.ReadInt32();
            break;
          }
          case 96: {
            PhyDef = input.ReadInt32();
            break;
          }
          case 104: {
            SpiAtk = input.ReadInt32();
            break;
          }
          case 112: {
            SpiDef = input.ReadInt32();
            break;
          }
          case 125: {
            Dvo = input.ReadFloat();
            break;
          }
          case 133: {
            Pcrir = input.ReadFloat();
            break;
          }
          case 141: {
            Rpcrir = input.ReadFloat();
            break;
          }
          case 149: {
            Pcri = input.ReadFloat();
            break;
          }
          case 157: {
            Rpcri = input.ReadFloat();
            break;
          }
          case 165: {
            Mcrir = input.ReadFloat();
            break;
          }
          case 173: {
            Rmcrir = input.ReadFloat();
            break;
          }
          case 181: {
            Mcri = input.ReadFloat();
            break;
          }
          case 189: {
            Rmcri = input.ReadFloat();
            break;
          }
          case 197: {
            Nphyi = input.ReadFloat();
            break;
          }
          case 205: {
            Nmeni = input.ReadFloat();
            break;
          }
          case 210:
          case 208: {
            gemList_.AddEntriesFrom(input, _repeated_gemList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
