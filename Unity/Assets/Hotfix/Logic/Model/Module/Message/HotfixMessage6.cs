// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage6.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ET {

  #region Enums
  /// <summary>
  ///==============主Ui=========================
  /// </summary>
  public enum MainUIType {
    /// <summary>
    ///空
    /// </summary>
    NoneSlot = 0,
    /// <summary>
    ///技能
    /// </summary>
    SkillSlot = 1,
    /// <summary>
    ///物品
    /// </summary>
    ItemSlot = 2,
  }

  #endregion

  #region Messages
  public partial class MainUISlotInfo : pb::IMessage {
    private static readonly pb::MessageParser<MainUISlotInfo> _parser = new pb::MessageParser<MainUISlotInfo>(() => (MainUISlotInfo)MessagePool.Instance.Fetch(typeof(MainUISlotInfo)));
    public static pb::MessageParser<MainUISlotInfo> Parser { get { return _parser; } }

    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private global::ET.MainUIType mainUIType_ = 0;
    public global::ET.MainUIType MainUIType {
      get { return mainUIType_; }
      set {
        mainUIType_ = value;
      }
    }

    private int level_;
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int itemCount_;
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MainUIType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MainUIType);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemCount);
      }
      if (Index != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Index);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (MainUIType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MainUIType);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      level_ = 0;
      itemCount_ = 0;
      index_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            mainUIType_ = (global::ET.MainUIType) input.ReadEnum();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            ItemCount = input.ReadInt32();
            break;
          }
          case 40: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetMainUISetting : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetMainUISetting> _parser = new pb::MessageParser<C2M_GetMainUISetting>(() => (C2M_GetMainUISetting)MessagePool.Instance.Fetch(typeof(C2M_GetMainUISetting)));
    public static pb::MessageParser<C2M_GetMainUISetting> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetMainUISetting : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetMainUISetting> _parser = new pb::MessageParser<M2C_GetMainUISetting>(() => (M2C_GetMainUISetting)MessagePool.Instance.Fetch(typeof(M2C_GetMainUISetting)));
    public static pb::MessageParser<M2C_GetMainUISetting> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.MainUISlotInfo> _repeated_mainUISlotList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.MainUISlotInfo.Parser);
    private pbc::RepeatedField<global::ET.MainUISlotInfo> mainUISlotList_ = new pbc::RepeatedField<global::ET.MainUISlotInfo>();
    public pbc::RepeatedField<global::ET.MainUISlotInfo> MainUISlotList {
      get { return mainUISlotList_; }
      set { mainUISlotList_ = value; }
    }

    private bool isAutoSkill_;
    public bool IsAutoSkill {
      get { return isAutoSkill_; }
      set {
        isAutoSkill_ = value;
      }
    }

    private bool isDisplayOthers_;
    public bool IsDisplayOthers {
      get { return isDisplayOthers_; }
      set {
        isDisplayOthers_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mainUISlotList_.WriteTo(output, _repeated_mainUISlotList_codec);
      if (IsAutoSkill != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAutoSkill);
      }
      if (IsDisplayOthers != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsDisplayOthers);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += mainUISlotList_.CalculateSize(_repeated_mainUISlotList_codec);
      if (IsAutoSkill != false) {
        size += 1 + 1;
      }
      if (IsDisplayOthers != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < mainUISlotList_.Count; i++) { MessagePool.Instance.Recycle(mainUISlotList_[i]); }
      mainUISlotList_.Clear();
      isAutoSkill_ = false;
      isDisplayOthers_ = false;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mainUISlotList_.AddEntriesFrom(input, _repeated_mainUISlotList_codec);
            break;
          }
          case 16: {
            IsAutoSkill = input.ReadBool();
            break;
          }
          case 24: {
            IsDisplayOthers = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_DropSkill : pb::IMessage {
    private static readonly pb::MessageParser<C2M_DropSkill> _parser = new pb::MessageParser<C2M_DropSkill>(() => (C2M_DropSkill)MessagePool.Instance.Fetch(typeof(C2M_DropSkill)));
    public static pb::MessageParser<C2M_DropSkill> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int slotId_;
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    private int skillId_;
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SlotId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      slotId_ = 0;
      skillId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SlotId = input.ReadInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_DropSkill : pb::IMessage {
    private static readonly pb::MessageParser<M2C_DropSkill> _parser = new pb::MessageParser<M2C_DropSkill>(() => (M2C_DropSkill)MessagePool.Instance.Fetch(typeof(M2C_DropSkill)));
    public static pb::MessageParser<M2C_DropSkill> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.MainUISlotInfo> _repeated_mainUISlotList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.MainUISlotInfo.Parser);
    private pbc::RepeatedField<global::ET.MainUISlotInfo> mainUISlotList_ = new pbc::RepeatedField<global::ET.MainUISlotInfo>();
    public pbc::RepeatedField<global::ET.MainUISlotInfo> MainUISlotList {
      get { return mainUISlotList_; }
      set { mainUISlotList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mainUISlotList_.WriteTo(output, _repeated_mainUISlotList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += mainUISlotList_.CalculateSize(_repeated_mainUISlotList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < mainUISlotList_.Count; i++) { MessagePool.Instance.Recycle(mainUISlotList_[i]); }
      mainUISlotList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mainUISlotList_.AddEntriesFrom(input, _repeated_mainUISlotList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_DropItem : pb::IMessage {
    private static readonly pb::MessageParser<C2M_DropItem> _parser = new pb::MessageParser<C2M_DropItem>(() => (C2M_DropItem)MessagePool.Instance.Fetch(typeof(C2M_DropItem)));
    public static pb::MessageParser<C2M_DropItem> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int slotId_;
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    private int bagIndex_;
    public int BagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SlotId);
      }
      if (BagIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BagIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotId);
      }
      if (BagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BagIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      slotId_ = 0;
      bagIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SlotId = input.ReadInt32();
            break;
          }
          case 16: {
            BagIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_DropItem : pb::IMessage {
    private static readonly pb::MessageParser<M2C_DropItem> _parser = new pb::MessageParser<M2C_DropItem>(() => (M2C_DropItem)MessagePool.Instance.Fetch(typeof(M2C_DropItem)));
    public static pb::MessageParser<M2C_DropItem> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.MainUISlotInfo> _repeated_mainUISlotList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.MainUISlotInfo.Parser);
    private pbc::RepeatedField<global::ET.MainUISlotInfo> mainUISlotList_ = new pbc::RepeatedField<global::ET.MainUISlotInfo>();
    public pbc::RepeatedField<global::ET.MainUISlotInfo> MainUISlotList {
      get { return mainUISlotList_; }
      set { mainUISlotList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mainUISlotList_.WriteTo(output, _repeated_mainUISlotList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += mainUISlotList_.CalculateSize(_repeated_mainUISlotList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < mainUISlotList_.Count; i++) { MessagePool.Instance.Recycle(mainUISlotList_[i]); }
      mainUISlotList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mainUISlotList_.AddEntriesFrom(input, _repeated_mainUISlotList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_UseMainUISkill : pb::IMessage {
    private static readonly pb::MessageParser<C2M_UseMainUISkill> _parser = new pb::MessageParser<C2M_UseMainUISkill>(() => (C2M_UseMainUISkill)MessagePool.Instance.Fetch(typeof(C2M_UseMainUISkill)));
    public static pb::MessageParser<C2M_UseMainUISkill> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int slotId_;
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SlotId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      slotId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SlotId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_UseMainUISkill : pb::IMessage {
    private static readonly pb::MessageParser<M2C_UseMainUISkill> _parser = new pb::MessageParser<M2C_UseMainUISkill>(() => (M2C_UseMainUISkill)MessagePool.Instance.Fetch(typeof(M2C_UseMainUISkill)));
    public static pb::MessageParser<M2C_UseMainUISkill> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_UseMainUIGoods : pb::IMessage {
    private static readonly pb::MessageParser<C2M_UseMainUIGoods> _parser = new pb::MessageParser<C2M_UseMainUIGoods>(() => (C2M_UseMainUIGoods)MessagePool.Instance.Fetch(typeof(C2M_UseMainUIGoods)));
    public static pb::MessageParser<C2M_UseMainUIGoods> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int slotId_;
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SlotId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      slotId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SlotId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_UseMainUIGoods : pb::IMessage {
    private static readonly pb::MessageParser<M2C_UseMainUIGoods> _parser = new pb::MessageParser<M2C_UseMainUIGoods>(() => (M2C_UseMainUIGoods)MessagePool.Instance.Fetch(typeof(M2C_UseMainUIGoods)));
    public static pb::MessageParser<M2C_UseMainUIGoods> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.MainUISlotInfo> _repeated_mainUISlotList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.MainUISlotInfo.Parser);
    private pbc::RepeatedField<global::ET.MainUISlotInfo> mainUISlotList_ = new pbc::RepeatedField<global::ET.MainUISlotInfo>();
    public pbc::RepeatedField<global::ET.MainUISlotInfo> MainUISlotList {
      get { return mainUISlotList_; }
      set { mainUISlotList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mainUISlotList_.WriteTo(output, _repeated_mainUISlotList_codec);
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += mainUISlotList_.CalculateSize(_repeated_mainUISlotList_codec);
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < mainUISlotList_.Count; i++) { MessagePool.Instance.Recycle(mainUISlotList_[i]); }
      mainUISlotList_.Clear();
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mainUISlotList_.AddEntriesFrom(input, _repeated_mainUISlotList_codec);
            break;
          }
          case 18: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///===============技能================================
  ///技能信息
  /// </summary>
  public partial class SkillInfo : pb::IMessage {
    private static readonly pb::MessageParser<SkillInfo> _parser = new pb::MessageParser<SkillInfo>(() => (SkillInfo)MessagePool.Instance.Fetch(typeof(SkillInfo)));
    public static pb::MessageParser<SkillInfo> Parser { get { return _parser; } }

    private int skillId_;
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    private int skillLevel_;
    public int SkillLevel {
      get { return skillLevel_; }
      set {
        skillLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
      if (SkillLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (SkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      skillId_ = 0;
      skillLevel_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
          case 16: {
            SkillLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetSkill : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetSkill> _parser = new pb::MessageParser<C2M_GetSkill>(() => (C2M_GetSkill)MessagePool.Instance.Fetch(typeof(C2M_GetSkill)));
    public static pb::MessageParser<C2M_GetSkill> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetSkill : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetSkill> _parser = new pb::MessageParser<M2C_GetSkill>(() => (M2C_GetSkill)MessagePool.Instance.Fetch(typeof(M2C_GetSkill)));
    public static pb::MessageParser<M2C_GetSkill> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.SkillInfo> _repeated_skillInfoLsit_codec
        = pb::FieldCodec.ForMessage(10, global::ET.SkillInfo.Parser);
    private pbc::RepeatedField<global::ET.SkillInfo> skillInfoLsit_ = new pbc::RepeatedField<global::ET.SkillInfo>();
    public pbc::RepeatedField<global::ET.SkillInfo> SkillInfoLsit {
      get { return skillInfoLsit_; }
      set { skillInfoLsit_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_autoSkillList_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> autoSkillList_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> AutoSkillList {
      get { return autoSkillList_; }
      set { autoSkillList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      skillInfoLsit_.WriteTo(output, _repeated_skillInfoLsit_codec);
      autoSkillList_.WriteTo(output, _repeated_autoSkillList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += skillInfoLsit_.CalculateSize(_repeated_skillInfoLsit_codec);
      size += autoSkillList_.CalculateSize(_repeated_autoSkillList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < skillInfoLsit_.Count; i++) { MessagePool.Instance.Recycle(skillInfoLsit_[i]); }
      skillInfoLsit_.Clear();
      autoSkillList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            skillInfoLsit_.AddEntriesFrom(input, _repeated_skillInfoLsit_codec);
            break;
          }
          case 18:
          case 16: {
            autoSkillList_.AddEntriesFrom(input, _repeated_autoSkillList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_SaveAutoSkill : pb::IMessage {
    private static readonly pb::MessageParser<C2M_SaveAutoSkill> _parser = new pb::MessageParser<C2M_SaveAutoSkill>(() => (C2M_SaveAutoSkill)MessagePool.Instance.Fetch(typeof(C2M_SaveAutoSkill)));
    public static pb::MessageParser<C2M_SaveAutoSkill> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_autoSkillList_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> autoSkillList_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> AutoSkillList {
      get { return autoSkillList_; }
      set { autoSkillList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      autoSkillList_.WriteTo(output, _repeated_autoSkillList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += autoSkillList_.CalculateSize(_repeated_autoSkillList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      autoSkillList_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            autoSkillList_.AddEntriesFrom(input, _repeated_autoSkillList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SaveAutoSkill : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SaveAutoSkill> _parser = new pb::MessageParser<M2C_SaveAutoSkill>(() => (M2C_SaveAutoSkill)MessagePool.Instance.Fetch(typeof(M2C_SaveAutoSkill)));
    public static pb::MessageParser<M2C_SaveAutoSkill> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_LearnSkill : pb::IMessage {
    private static readonly pb::MessageParser<C2M_LearnSkill> _parser = new pb::MessageParser<C2M_LearnSkill>(() => (C2M_LearnSkill)MessagePool.Instance.Fetch(typeof(C2M_LearnSkill)));
    public static pb::MessageParser<C2M_LearnSkill> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int skillId_;
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      skillId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_LearnSkill : pb::IMessage {
    private static readonly pb::MessageParser<M2C_LearnSkill> _parser = new pb::MessageParser<M2C_LearnSkill>(() => (M2C_LearnSkill)MessagePool.Instance.Fetch(typeof(M2C_LearnSkill)));
    public static pb::MessageParser<M2C_LearnSkill> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.SkillInfo> _repeated_skillInfoLsit_codec
        = pb::FieldCodec.ForMessage(10, global::ET.SkillInfo.Parser);
    private pbc::RepeatedField<global::ET.SkillInfo> skillInfoLsit_ = new pbc::RepeatedField<global::ET.SkillInfo>();
    public pbc::RepeatedField<global::ET.SkillInfo> SkillInfoLsit {
      get { return skillInfoLsit_; }
      set { skillInfoLsit_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_autoSkillList_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> autoSkillList_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> AutoSkillList {
      get { return autoSkillList_; }
      set { autoSkillList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      skillInfoLsit_.WriteTo(output, _repeated_skillInfoLsit_codec);
      autoSkillList_.WriteTo(output, _repeated_autoSkillList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += skillInfoLsit_.CalculateSize(_repeated_skillInfoLsit_codec);
      size += autoSkillList_.CalculateSize(_repeated_autoSkillList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < skillInfoLsit_.Count; i++) { MessagePool.Instance.Recycle(skillInfoLsit_[i]); }
      skillInfoLsit_.Clear();
      autoSkillList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            skillInfoLsit_.AddEntriesFrom(input, _repeated_skillInfoLsit_codec);
            break;
          }
          case 18:
          case 16: {
            autoSkillList_.AddEntriesFrom(input, _repeated_autoSkillList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetCharacter : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetCharacter> _parser = new pb::MessageParser<C2M_GetCharacter>(() => (C2M_GetCharacter)MessagePool.Instance.Fetch(typeof(C2M_GetCharacter)));
    public static pb::MessageParser<C2M_GetCharacter> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetCharacter : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetCharacter> _parser = new pb::MessageParser<M2C_GetCharacter>(() => (M2C_GetCharacter)MessagePool.Instance.Fetch(typeof(M2C_GetCharacter)));
    public static pb::MessageParser<M2C_GetCharacter> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ET._UnitCharacter unitCharacter_;
    public global::ET._UnitCharacter UnitCharacter {
      get { return unitCharacter_; }
      set {
        unitCharacter_ = value;
      }
    }

    private global::ET.BattleCharacter battleCharacter_;
    public global::ET.BattleCharacter BattleCharacter {
      get { return battleCharacter_; }
      set {
        battleCharacter_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_wornBagMapList_codec
        = pb::FieldCodec.ForMessage(26, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> wornBagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> WornBagMapList {
      get { return wornBagMapList_; }
      set { wornBagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (unitCharacter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UnitCharacter);
      }
      if (battleCharacter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleCharacter);
      }
      wornBagMapList_.WriteTo(output, _repeated_wornBagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (unitCharacter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitCharacter);
      }
      if (battleCharacter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleCharacter);
      }
      size += wornBagMapList_.CalculateSize(_repeated_wornBagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (unitCharacter_ != null) MessagePool.Instance.Recycle(unitCharacter_); unitCharacter_ = null;
      if (battleCharacter_ != null) MessagePool.Instance.Recycle(battleCharacter_); battleCharacter_ = null;
      for (int i = 0; i < wornBagMapList_.Count; i++) { MessagePool.Instance.Recycle(wornBagMapList_[i]); }
      wornBagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (unitCharacter_ == null) {
              unitCharacter_ = new global::ET._UnitCharacter();
            }
            input.ReadMessage(unitCharacter_);
            break;
          }
          case 18: {
            if (battleCharacter_ == null) {
              battleCharacter_ = new global::ET.BattleCharacter();
            }
            input.ReadMessage(battleCharacter_);
            break;
          }
          case 26: {
            wornBagMapList_.AddEntriesFrom(input, _repeated_wornBagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_AddPoint : pb::IMessage {
    private static readonly pb::MessageParser<C2M_AddPoint> _parser = new pb::MessageParser<C2M_AddPoint>(() => (C2M_AddPoint)MessagePool.Instance.Fetch(typeof(C2M_AddPoint)));
    public static pb::MessageParser<C2M_AddPoint> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int trans_;
    public int Trans {
      get { return trans_; }
      set {
        trans_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_pointList_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> pointList_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> PointList {
      get { return pointList_; }
      set { pointList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      pointList_.WriteTo(output, _repeated_pointList_codec);
      if (Trans != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Trans);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Trans != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Trans);
      }
      size += pointList_.CalculateSize(_repeated_pointList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      pointList_.Clear();
      trans_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            pointList_.AddEntriesFrom(input, _repeated_pointList_codec);
            break;
          }
          case 16: {
            Trans = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_AddPoint : pb::IMessage {
    private static readonly pb::MessageParser<M2C_AddPoint> _parser = new pb::MessageParser<M2C_AddPoint>(() => (M2C_AddPoint)MessagePool.Instance.Fetch(typeof(M2C_AddPoint)));
    public static pb::MessageParser<M2C_AddPoint> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ET._UnitCharacter character_;
    public global::ET._UnitCharacter Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    private global::ET.BattleCharacter battleCharacter_;
    public global::ET.BattleCharacter BattleCharacter {
      get { return battleCharacter_; }
      set {
        battleCharacter_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (character_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Character);
      }
      if (battleCharacter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleCharacter);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (character_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
      }
      if (battleCharacter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleCharacter);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (character_ != null) MessagePool.Instance.Recycle(character_); character_ = null;
      if (battleCharacter_ != null) MessagePool.Instance.Recycle(battleCharacter_); battleCharacter_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (character_ == null) {
              character_ = new global::ET._UnitCharacter();
            }
            input.ReadMessage(character_);
            break;
          }
          case 18: {
            if (battleCharacter_ == null) {
              battleCharacter_ = new global::ET.BattleCharacter();
            }
            input.ReadMessage(battleCharacter_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_ResetPoint : pb::IMessage {
    private static readonly pb::MessageParser<C2M_ResetPoint> _parser = new pb::MessageParser<C2M_ResetPoint>(() => (C2M_ResetPoint)MessagePool.Instance.Fetch(typeof(C2M_ResetPoint)));
    public static pb::MessageParser<C2M_ResetPoint> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int trans_;
    public int Trans {
      get { return trans_; }
      set {
        trans_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Trans != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Trans);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Trans != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Trans);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      trans_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Trans = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_ResetPoint : pb::IMessage {
    private static readonly pb::MessageParser<M2C_ResetPoint> _parser = new pb::MessageParser<M2C_ResetPoint>(() => (M2C_ResetPoint)MessagePool.Instance.Fetch(typeof(M2C_ResetPoint)));
    public static pb::MessageParser<M2C_ResetPoint> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ET._UnitCharacter character_;
    public global::ET._UnitCharacter Character {
      get { return character_; }
      set {
        character_ = value;
      }
    }

    private global::ET.BattleCharacter battleCharacter_;
    public global::ET.BattleCharacter BattleCharacter {
      get { return battleCharacter_; }
      set {
        battleCharacter_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (character_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Character);
      }
      if (battleCharacter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleCharacter);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (character_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Character);
      }
      if (battleCharacter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleCharacter);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (character_ != null) MessagePool.Instance.Recycle(character_); character_ = null;
      if (battleCharacter_ != null) MessagePool.Instance.Recycle(battleCharacter_); battleCharacter_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (character_ == null) {
              character_ = new global::ET._UnitCharacter();
            }
            input.ReadMessage(character_);
            break;
          }
          case 18: {
            if (battleCharacter_ == null) {
              battleCharacter_ = new global::ET.BattleCharacter();
            }
            input.ReadMessage(battleCharacter_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendCharacter : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendCharacter> _parser = new pb::MessageParser<M2C_SendCharacter>(() => (M2C_SendCharacter)MessagePool.Instance.Fetch(typeof(M2C_SendCharacter)));
    public static pb::MessageParser<M2C_SendCharacter> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ET._UnitCharacter unitCharacter_;
    public global::ET._UnitCharacter UnitCharacter {
      get { return unitCharacter_; }
      set {
        unitCharacter_ = value;
      }
    }

    private global::ET.BattleCharacter battleCharacter_;
    public global::ET.BattleCharacter BattleCharacter {
      get { return battleCharacter_; }
      set {
        battleCharacter_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (unitCharacter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UnitCharacter);
      }
      if (battleCharacter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleCharacter);
      }
      if (Id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (unitCharacter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitCharacter);
      }
      if (battleCharacter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleCharacter);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (unitCharacter_ != null) MessagePool.Instance.Recycle(unitCharacter_); unitCharacter_ = null;
      if (battleCharacter_ != null) MessagePool.Instance.Recycle(battleCharacter_); battleCharacter_ = null;
      id_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (unitCharacter_ == null) {
              unitCharacter_ = new global::ET._UnitCharacter();
            }
            input.ReadMessage(unitCharacter_);
            break;
          }
          case 18: {
            if (battleCharacter_ == null) {
              battleCharacter_ = new global::ET.BattleCharacter();
            }
            input.ReadMessage(battleCharacter_);
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendMoney : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendMoney> _parser = new pb::MessageParser<M2C_SendMoney>(() => (M2C_SendMoney)MessagePool.Instance.Fetch(typeof(M2C_SendMoney)));
    public static pb::MessageParser<M2C_SendMoney> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long coin_;
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    private int yuanBao_;
    public int YuanBao {
      get { return yuanBao_; }
      set {
        yuanBao_ = value;
      }
    }

    private int voucher_;
    public int Voucher {
      get { return voucher_; }
      set {
        voucher_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Coin != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Coin);
      }
      if (YuanBao != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(YuanBao);
      }
      if (Voucher != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Voucher);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      if (YuanBao != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YuanBao);
      }
      if (Voucher != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Voucher);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      coin_ = 0;
      yuanBao_ = 0;
      voucher_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Coin = input.ReadInt64();
            break;
          }
          case 16: {
            YuanBao = input.ReadInt32();
            break;
          }
          case 24: {
            Voucher = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendLevel : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendLevel> _parser = new pb::MessageParser<M2C_SendLevel>(() => (M2C_SendLevel)MessagePool.Instance.Fetch(typeof(M2C_SendLevel)));
    public static pb::MessageParser<M2C_SendLevel> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long exp_;
    public long Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    private int level_;
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Exp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      exp_ = 0;
      level_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadInt64();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendEnergy : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendEnergy> _parser = new pb::MessageParser<M2C_SendEnergy>(() => (M2C_SendEnergy)MessagePool.Instance.Fetch(typeof(M2C_SendEnergy)));
    public static pb::MessageParser<M2C_SendEnergy> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int energy_;
    public int Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Energy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Energy);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      energy_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Energy = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetBag : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetBag> _parser = new pb::MessageParser<C2M_GetBag>(() => (C2M_GetBag)MessagePool.Instance.Fetch(typeof(C2M_GetBag)));
    public static pb::MessageParser<C2M_GetBag> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetBag : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetBag> _parser = new pb::MessageParser<M2C_GetBag>(() => (M2C_GetBag)MessagePool.Instance.Fetch(typeof(M2C_GetBag)));
    public static pb::MessageParser<M2C_GetBag> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendBag : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendBag> _parser = new pb::MessageParser<M2C_SendBag>(() => (M2C_SendBag)MessagePool.Instance.Fetch(typeof(M2C_SendBag)));
    public static pb::MessageParser<M2C_SendBag> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_AddRandomItem : pb::IMessage {
    private static readonly pb::MessageParser<C2M_AddRandomItem> _parser = new pb::MessageParser<C2M_AddRandomItem>(() => (C2M_AddRandomItem)MessagePool.Instance.Fetch(typeof(C2M_AddRandomItem)));
    public static pb::MessageParser<C2M_AddRandomItem> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ET.ItemType itemType_ = 0;
    public global::ET.ItemType ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ItemType);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemType_ = (global::ET.ItemType) input.ReadEnum();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendTip : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendTip> _parser = new pb::MessageParser<M2C_SendTip>(() => (M2C_SendTip)MessagePool.Instance.Fetch(typeof(M2C_SendTip)));
    public static pb::MessageParser<M2C_SendTip> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_DeleteItem : pb::IMessage {
    private static readonly pb::MessageParser<C2M_DeleteItem> _parser = new pb::MessageParser<C2M_DeleteItem>(() => (C2M_DeleteItem)MessagePool.Instance.Fetch(typeof(C2M_DeleteItem)));
    public static pb::MessageParser<C2M_DeleteItem> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      index_ = 0;
      count_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_DeleteItem : pb::IMessage {
    private static readonly pb::MessageParser<M2C_DeleteItem> _parser = new pb::MessageParser<M2C_DeleteItem>(() => (M2C_DeleteItem)MessagePool.Instance.Fetch(typeof(M2C_DeleteItem)));
    public static pb::MessageParser<M2C_DeleteItem> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_ChangeItemPos : pb::IMessage {
    private static readonly pb::MessageParser<C2M_ChangeItemPos> _parser = new pb::MessageParser<C2M_ChangeItemPos>(() => (C2M_ChangeItemPos)MessagePool.Instance.Fetch(typeof(C2M_ChangeItemPos)));
    public static pb::MessageParser<C2M_ChangeItemPos> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int pos1_;
    public int Pos1 {
      get { return pos1_; }
      set {
        pos1_ = value;
      }
    }

    private int pos2_;
    public int Pos2 {
      get { return pos2_; }
      set {
        pos2_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos1);
      }
      if (Pos2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos2);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Pos1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos1);
      }
      if (Pos2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos2);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      pos1_ = 0;
      pos2_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Pos1 = input.ReadInt32();
            break;
          }
          case 16: {
            Pos2 = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_ChangeItemPos : pb::IMessage {
    private static readonly pb::MessageParser<M2C_ChangeItemPos> _parser = new pb::MessageParser<M2C_ChangeItemPos>(() => (M2C_ChangeItemPos)MessagePool.Instance.Fetch(typeof(M2C_ChangeItemPos)));
    public static pb::MessageParser<M2C_ChangeItemPos> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_SplitItem : pb::IMessage {
    private static readonly pb::MessageParser<C2M_SplitItem> _parser = new pb::MessageParser<C2M_SplitItem>(() => (C2M_SplitItem)MessagePool.Instance.Fetch(typeof(C2M_SplitItem)));
    public static pb::MessageParser<C2M_SplitItem> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      index_ = 0;
      count_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SplitItem : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SplitItem> _parser = new pb::MessageParser<M2C_SplitItem>(() => (M2C_SplitItem)MessagePool.Instance.Fetch(typeof(M2C_SplitItem)));
    public static pb::MessageParser<M2C_SplitItem> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_SortBag : pb::IMessage {
    private static readonly pb::MessageParser<C2M_SortBag> _parser = new pb::MessageParser<C2M_SortBag>(() => (C2M_SortBag)MessagePool.Instance.Fetch(typeof(C2M_SortBag)));
    public static pb::MessageParser<C2M_SortBag> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SortBag : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SortBag> _parser = new pb::MessageParser<M2C_SortBag>(() => (M2C_SortBag)MessagePool.Instance.Fetch(typeof(M2C_SortBag)));
    public static pb::MessageParser<M2C_SortBag> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_PutOn : pb::IMessage {
    private static readonly pb::MessageParser<C2M_PutOn> _parser = new pb::MessageParser<C2M_PutOn>(() => (C2M_PutOn)MessagePool.Instance.Fetch(typeof(C2M_PutOn)));
    public static pb::MessageParser<C2M_PutOn> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      index_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PutOn : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PutOn> _parser = new pb::MessageParser<M2C_PutOn>(() => (M2C_PutOn)MessagePool.Instance.Fetch(typeof(M2C_PutOn)));
    public static pb::MessageParser<M2C_PutOn> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_wornBagMapList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> wornBagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> WornBagMapList {
      get { return wornBagMapList_; }
      set { wornBagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      wornBagMapList_.WriteTo(output, _repeated_wornBagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      size += wornBagMapList_.CalculateSize(_repeated_wornBagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      for (int i = 0; i < wornBagMapList_.Count; i++) { MessagePool.Instance.Recycle(wornBagMapList_[i]); }
      wornBagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 18: {
            wornBagMapList_.AddEntriesFrom(input, _repeated_wornBagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_Takeoff : pb::IMessage {
    private static readonly pb::MessageParser<C2M_Takeoff> _parser = new pb::MessageParser<C2M_Takeoff>(() => (C2M_Takeoff)MessagePool.Instance.Fetch(typeof(C2M_Takeoff)));
    public static pb::MessageParser<C2M_Takeoff> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      index_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_Takeoff : pb::IMessage {
    private static readonly pb::MessageParser<M2C_Takeoff> _parser = new pb::MessageParser<M2C_Takeoff>(() => (M2C_Takeoff)MessagePool.Instance.Fetch(typeof(M2C_Takeoff)));
    public static pb::MessageParser<M2C_Takeoff> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_wornBagMapList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> wornBagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> WornBagMapList {
      get { return wornBagMapList_; }
      set { wornBagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      wornBagMapList_.WriteTo(output, _repeated_wornBagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      size += wornBagMapList_.CalculateSize(_repeated_wornBagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      for (int i = 0; i < wornBagMapList_.Count; i++) { MessagePool.Instance.Recycle(wornBagMapList_[i]); }
      wornBagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 18: {
            wornBagMapList_.AddEntriesFrom(input, _repeated_wornBagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_UseGoods : pb::IMessage {
    private static readonly pb::MessageParser<C2M_UseGoods> _parser = new pb::MessageParser<C2M_UseGoods>(() => (C2M_UseGoods)MessagePool.Instance.Fetch(typeof(C2M_UseGoods)));
    public static pb::MessageParser<C2M_UseGoods> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      index_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_UseGoods : pb::IMessage {
    private static readonly pb::MessageParser<M2C_UseGoods> _parser = new pb::MessageParser<M2C_UseGoods>(() => (M2C_UseGoods)MessagePool.Instance.Fetch(typeof(M2C_UseGoods)));
    public static pb::MessageParser<M2C_UseGoods> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ET.MainUISlotInfo> _repeated_mainUISlotList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.MainUISlotInfo.Parser);
    private pbc::RepeatedField<global::ET.MainUISlotInfo> mainUISlotList_ = new pbc::RepeatedField<global::ET.MainUISlotInfo>();
    public pbc::RepeatedField<global::ET.MainUISlotInfo> MainUISlotList {
      get { return mainUISlotList_; }
      set { mainUISlotList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      mainUISlotList_.WriteTo(output, _repeated_mainUISlotList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      size += mainUISlotList_.CalculateSize(_repeated_mainUISlotList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      for (int i = 0; i < mainUISlotList_.Count; i++) { MessagePool.Instance.Recycle(mainUISlotList_[i]); }
      mainUISlotList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 18: {
            mainUISlotList_.AddEntriesFrom(input, _repeated_mainUISlotList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_Upgrade : pb::IMessage {
    private static readonly pb::MessageParser<C2M_Upgrade> _parser = new pb::MessageParser<C2M_Upgrade>(() => (C2M_Upgrade)MessagePool.Instance.Fetch(typeof(C2M_Upgrade)));
    public static pb::MessageParser<C2M_Upgrade> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      index_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_Upgrade : pb::IMessage {
    private static readonly pb::MessageParser<M2C_Upgrade> _parser = new pb::MessageParser<M2C_Upgrade>(() => (M2C_Upgrade)MessagePool.Instance.Fetch(typeof(M2C_Upgrade)));
    public static pb::MessageParser<M2C_Upgrade> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
