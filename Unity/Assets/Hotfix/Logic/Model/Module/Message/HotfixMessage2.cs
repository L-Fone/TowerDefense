// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage2.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ET {

  #region Messages
  /// <summary>
  ///=================主线===========================
  /// </summary>
  public partial class M2C_InitMainStoryMap : pb::IMessage {
    private static readonly pb::MessageParser<M2C_InitMainStoryMap> _parser = new pb::MessageParser<M2C_InitMainStoryMap>(() => (M2C_InitMainStoryMap)MessagePool.Instance.Fetch(typeof(M2C_InitMainStoryMap)));
    public static pb::MessageParser<M2C_InitMainStoryMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int mainStoryId_;
    public int MainStoryId {
      get { return mainStoryId_; }
      set {
        mainStoryId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MainStoryId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MainStoryId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MainStoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainStoryId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mainStoryId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MainStoryId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_StartMainStoryFight : pb::IMessage {
    private static readonly pb::MessageParser<C2M_StartMainStoryFight> _parser = new pb::MessageParser<C2M_StartMainStoryFight>(() => (C2M_StartMainStoryFight)MessagePool.Instance.Fetch(typeof(C2M_StartMainStoryFight)));
    public static pb::MessageParser<C2M_StartMainStoryFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int region_;
    public int Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Region != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Region);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Region != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Region);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      region_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Region = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_StartMainStoryFight : pb::IMessage {
    private static readonly pb::MessageParser<M2C_StartMainStoryFight> _parser = new pb::MessageParser<M2C_StartMainStoryFight>(() => (M2C_StartMainStoryFight)MessagePool.Instance.Fetch(typeof(M2C_StartMainStoryFight)));
    public static pb::MessageParser<M2C_StartMainStoryFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MainStoryMonsterInfo : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MainStoryMonsterInfo> _parser = new pb::MessageParser<M2C_MainStoryMonsterInfo>(() => (M2C_MainStoryMonsterInfo)MessagePool.Instance.Fetch(typeof(M2C_MainStoryMonsterInfo)));
    public static pb::MessageParser<M2C_MainStoryMonsterInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ET.MonsterUnitInfo> _repeated_monsterUnitInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.MonsterUnitInfo.Parser);
    private pbc::RepeatedField<global::ET.MonsterUnitInfo> monsterUnitInfoList_ = new pbc::RepeatedField<global::ET.MonsterUnitInfo>();
    public pbc::RepeatedField<global::ET.MonsterUnitInfo> MonsterUnitInfoList {
      get { return monsterUnitInfoList_; }
      set { monsterUnitInfoList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      monsterUnitInfoList_.WriteTo(output, _repeated_monsterUnitInfoList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += monsterUnitInfoList_.CalculateSize(_repeated_monsterUnitInfoList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < monsterUnitInfoList_.Count; i++) { MessagePool.Instance.Recycle(monsterUnitInfoList_[i]); }
      monsterUnitInfoList_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            monsterUnitInfoList_.AddEntriesFrom(input, _repeated_monsterUnitInfoList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class MonsterUnitInfo : pb::IMessage {
    private static readonly pb::MessageParser<MonsterUnitInfo> _parser = new pb::MessageParser<MonsterUnitInfo>(() => (MonsterUnitInfo)MessagePool.Instance.Fetch(typeof(MonsterUnitInfo)));
    public static pb::MessageParser<MonsterUnitInfo> Parser { get { return _parser; } }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int monsterId_;
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      monsterId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            MonsterId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class ReMonsterUnitInfo : pb::IMessage {
    private static readonly pb::MessageParser<ReMonsterUnitInfo> _parser = new pb::MessageParser<ReMonsterUnitInfo>(() => (ReMonsterUnitInfo)MessagePool.Instance.Fetch(typeof(ReMonsterUnitInfo)));
    public static pb::MessageParser<ReMonsterUnitInfo> Parser { get { return _parser; } }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int monsterId_;
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    private int hp_;
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    private int maxHp_;
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MonsterId);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxHp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      monsterId_ = 0;
      hp_ = 0;
      maxHp_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            MonsterId = input.ReadInt32();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 32: {
            MaxHp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_ReMainStoryMonsterInfo : pb::IMessage {
    private static readonly pb::MessageParser<M2C_ReMainStoryMonsterInfo> _parser = new pb::MessageParser<M2C_ReMainStoryMonsterInfo>(() => (M2C_ReMainStoryMonsterInfo)MessagePool.Instance.Fetch(typeof(M2C_ReMainStoryMonsterInfo)));
    public static pb::MessageParser<M2C_ReMainStoryMonsterInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ET.ReMonsterUnitInfo> _repeated_monsterUnitInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.ReMonsterUnitInfo.Parser);
    private pbc::RepeatedField<global::ET.ReMonsterUnitInfo> monsterUnitInfoList_ = new pbc::RepeatedField<global::ET.ReMonsterUnitInfo>();
    public pbc::RepeatedField<global::ET.ReMonsterUnitInfo> MonsterUnitInfoList {
      get { return monsterUnitInfoList_; }
      set { monsterUnitInfoList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      monsterUnitInfoList_.WriteTo(output, _repeated_monsterUnitInfoList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += monsterUnitInfoList_.CalculateSize(_repeated_monsterUnitInfoList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < monsterUnitInfoList_.Count; i++) { MessagePool.Instance.Recycle(monsterUnitInfoList_[i]); }
      monsterUnitInfoList_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            monsterUnitInfoList_.AddEntriesFrom(input, _repeated_monsterUnitInfoList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BattleVictory : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BattleVictory> _parser = new pb::MessageParser<M2C_BattleVictory>(() => (M2C_BattleVictory)MessagePool.Instance.Fetch(typeof(M2C_BattleVictory)));
    public static pb::MessageParser<M2C_BattleVictory> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int battleType_;
    public int BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleType);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      battleType_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleType = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BattleDefeat : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BattleDefeat> _parser = new pb::MessageParser<M2C_BattleDefeat>(() => (M2C_BattleDefeat)MessagePool.Instance.Fetch(typeof(M2C_BattleDefeat)));
    public static pb::MessageParser<M2C_BattleDefeat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int battleType_;
    public int BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleType);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      battleType_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleType = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///=================Boss===========================
  /// </summary>
  public partial class M2C_BossRefresh : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BossRefresh> _parser = new pb::MessageParser<M2C_BossRefresh>(() => (M2C_BossRefresh)MessagePool.Instance.Fetch(typeof(M2C_BossRefresh)));
    public static pb::MessageParser<M2C_BossRefresh> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int bossId_;
    public int BossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BossId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BossId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (BossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      bossId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BossId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_StartBossFightRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_StartBossFightRequest> _parser = new pb::MessageParser<C2M_StartBossFightRequest>(() => (C2M_StartBossFightRequest)MessagePool.Instance.Fetch(typeof(C2M_StartBossFightRequest)));
    public static pb::MessageParser<C2M_StartBossFightRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_StartBossFightRequest : pb::IMessage {
    private static readonly pb::MessageParser<M2C_StartBossFightRequest> _parser = new pb::MessageParser<M2C_StartBossFightRequest>(() => (M2C_StartBossFightRequest)MessagePool.Instance.Fetch(typeof(M2C_StartBossFightRequest)));
    public static pb::MessageParser<M2C_StartBossFightRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_StartBossFight : pb::IMessage {
    private static readonly pb::MessageParser<C2M_StartBossFight> _parser = new pb::MessageParser<C2M_StartBossFight>(() => (C2M_StartBossFight)MessagePool.Instance.Fetch(typeof(C2M_StartBossFight)));
    public static pb::MessageParser<C2M_StartBossFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_StartBossFight : pb::IMessage {
    private static readonly pb::MessageParser<M2C_StartBossFight> _parser = new pb::MessageParser<M2C_StartBossFight>(() => (M2C_StartBossFight)MessagePool.Instance.Fetch(typeof(M2C_StartBossFight)));
    public static pb::MessageParser<M2C_StartBossFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendBossInfo : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendBossInfo> _parser = new pb::MessageParser<M2C_SendBossInfo>(() => (M2C_SendBossInfo)MessagePool.Instance.Fetch(typeof(M2C_SendBossInfo)));
    public static pb::MessageParser<M2C_SendBossInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int bossId_;
    public int BossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BossId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BossId);
      }
      if (UnitId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (BossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      bossId_ = 0;
      unitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BossId = input.ReadInt32();
            break;
          }
          case 16: {
            UnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_ReSendBossInfo : pb::IMessage {
    private static readonly pb::MessageParser<M2C_ReSendBossInfo> _parser = new pb::MessageParser<M2C_ReSendBossInfo>(() => (M2C_ReSendBossInfo)MessagePool.Instance.Fetch(typeof(M2C_ReSendBossInfo)));
    public static pb::MessageParser<M2C_ReSendBossInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int bossId_;
    public int BossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private int hp_;
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BossId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BossId);
      }
      if (UnitId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnitId);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (BossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      bossId_ = 0;
      unitId_ = 0;
      hp_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BossId = input.ReadInt32();
            break;
          }
          case 16: {
            UnitId = input.ReadInt64();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BossFightVictory : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BossFightVictory> _parser = new pb::MessageParser<M2C_BossFightVictory>(() => (M2C_BossFightVictory)MessagePool.Instance.Fetch(typeof(M2C_BossFightVictory)));
    public static pb::MessageParser<M2C_BossFightVictory> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BossFightDefeat : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BossFightDefeat> _parser = new pb::MessageParser<M2C_BossFightDefeat>(() => (M2C_BossFightDefeat)MessagePool.Instance.Fetch(typeof(M2C_BossFightDefeat)));
    public static pb::MessageParser<M2C_BossFightDefeat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BossDead : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BossDead> _parser = new pb::MessageParser<M2C_BossDead>(() => (M2C_BossDead)MessagePool.Instance.Fetch(typeof(M2C_BossDead)));
    public static pb::MessageParser<M2C_BossDead> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BossBeDefeat : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BossBeDefeat> _parser = new pb::MessageParser<M2C_BossBeDefeat>(() => (M2C_BossBeDefeat)MessagePool.Instance.Fetch(typeof(M2C_BossBeDefeat)));
    public static pb::MessageParser<M2C_BossBeDefeat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class RewardItem : pb::IMessage {
    private static readonly pb::MessageParser<RewardItem> _parser = new pb::MessageParser<RewardItem>(() => (RewardItem)MessagePool.Instance.Fetch(typeof(RewardItem)));
    public static pb::MessageParser<RewardItem> Parser { get { return _parser; } }

    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private global::ET.ItemType itemType_ = 0;
    public global::ET.ItemType ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ItemType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ItemType);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemType);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      count_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            itemType_ = (global::ET.ItemType) input.ReadEnum();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class StateBuffInfo : pb::IMessage {
    private static readonly pb::MessageParser<StateBuffInfo> _parser = new pb::MessageParser<StateBuffInfo>(() => (StateBuffInfo)MessagePool.Instance.Fetch(typeof(StateBuffInfo)));
    public static pb::MessageParser<StateBuffInfo> Parser { get { return _parser; } }

    private int stateType_;
    public int StateType {
      get { return stateType_; }
      set {
        stateType_ = value;
      }
    }

    private int layer_;
    public int Layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    private int userData_;
    public int UserData {
      get { return userData_; }
      set {
        userData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StateType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StateType);
      }
      if (Layer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Layer);
      }
      if (UserData != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (StateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateType);
      }
      if (Layer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Layer);
      }
      if (UserData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      stateType_ = 0;
      layer_ = 0;
      userData_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StateType = input.ReadInt32();
            break;
          }
          case 16: {
            Layer = input.ReadInt32();
            break;
          }
          case 24: {
            UserData = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_AutoBattle : pb::IMessage {
    private static readonly pb::MessageParser<C2M_AutoBattle> _parser = new pb::MessageParser<C2M_AutoBattle>(() => (C2M_AutoBattle)MessagePool.Instance.Fetch(typeof(C2M_AutoBattle)));
    public static pb::MessageParser<C2M_AutoBattle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_AutoBattle : pb::IMessage {
    private static readonly pb::MessageParser<M2C_AutoBattle> _parser = new pb::MessageParser<M2C_AutoBattle>(() => (M2C_AutoBattle)MessagePool.Instance.Fetch(typeof(M2C_AutoBattle)));
    public static pb::MessageParser<M2C_AutoBattle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_SelectEnermy : pb::IMessage {
    private static readonly pb::MessageParser<C2M_SelectEnermy> _parser = new pb::MessageParser<C2M_SelectEnermy>(() => (C2M_SelectEnermy)MessagePool.Instance.Fetch(typeof(C2M_SelectEnermy)));
    public static pb::MessageParser<C2M_SelectEnermy> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SelectEnermy : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SelectEnermy> _parser = new pb::MessageParser<M2C_SelectEnermy>(() => (M2C_SelectEnermy)MessagePool.Instance.Fetch(typeof(M2C_SelectEnermy)));
    public static pb::MessageParser<M2C_SelectEnermy> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_SelectTeamMember : pb::IMessage {
    private static readonly pb::MessageParser<C2M_SelectTeamMember> _parser = new pb::MessageParser<C2M_SelectTeamMember>(() => (C2M_SelectTeamMember)MessagePool.Instance.Fetch(typeof(C2M_SelectTeamMember)));
    public static pb::MessageParser<C2M_SelectTeamMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SelectTeamMember : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SelectTeamMember> _parser = new pb::MessageParser<M2C_SelectTeamMember>(() => (M2C_SelectTeamMember)MessagePool.Instance.Fetch(typeof(M2C_SelectTeamMember)));
    public static pb::MessageParser<M2C_SelectTeamMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PlaySkill : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PlaySkill> _parser = new pb::MessageParser<M2C_PlaySkill>(() => (M2C_PlaySkill)MessagePool.Instance.Fetch(typeof(M2C_PlaySkill)));
    public static pb::MessageParser<M2C_PlaySkill> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private int skillId_;
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    private int coolTime_;
    public int CoolTime {
      get { return coolTime_; }
      set {
        coolTime_ = value;
      }
    }

    private long targetId_;
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    private int mpCost_;
    public int MpCost {
      get { return mpCost_; }
      set {
        mpCost_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (CoolTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CoolTime);
      }
      if (TargetId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TargetId);
      }
      if (MpCost != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MpCost);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (CoolTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoolTime);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      if (MpCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MpCost);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      skillId_ = 0;
      coolTime_ = 0;
      targetId_ = 0;
      mpCost_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
          case 24: {
            CoolTime = input.ReadInt32();
            break;
          }
          case 32: {
            TargetId = input.ReadInt64();
            break;
          }
          case 40: {
            MpCost = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MonsterPlaySkill : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MonsterPlaySkill> _parser = new pb::MessageParser<M2C_MonsterPlaySkill>(() => (M2C_MonsterPlaySkill)MessagePool.Instance.Fetch(typeof(M2C_MonsterPlaySkill)));
    public static pb::MessageParser<M2C_MonsterPlaySkill> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private int skillId_;
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    private long targetId_;
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (TargetId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TargetId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      skillId_ = 0;
      targetId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
          case 24: {
            TargetId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PlaySkillEffect : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PlaySkillEffect> _parser = new pb::MessageParser<M2C_PlaySkillEffect>(() => (M2C_PlaySkillEffect)MessagePool.Instance.Fetch(typeof(M2C_PlaySkillEffect)));
    public static pb::MessageParser<M2C_PlaySkillEffect> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private long targetId_;
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    private int skillId_;
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (TargetId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TargetId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SkillId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      targetId_ = 0;
      skillId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 32: {
            TargetId = input.ReadInt64();
            break;
          }
          case 40: {
            SkillId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BattleSkillRet : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BattleSkillRet> _parser = new pb::MessageParser<M2C_BattleSkillRet>(() => (M2C_BattleSkillRet)MessagePool.Instance.Fetch(typeof(M2C_BattleSkillRet)));
    public static pb::MessageParser<M2C_BattleSkillRet> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private bool isCrit_;
    public bool IsCrit {
      get { return isCrit_; }
      set {
        isCrit_ = value;
      }
    }

    private int changeHpValue_;
    public int ChangeHpValue {
      get { return changeHpValue_; }
      set {
        changeHpValue_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (ChangeHpValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChangeHpValue);
      }
      if (IsCrit != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsCrit);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (IsCrit != false) {
        size += 1 + 1;
      }
      if (ChangeHpValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeHpValue);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      changeHpValue_ = 0;
      isCrit_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 16: {
            ChangeHpValue = input.ReadInt32();
            break;
          }
          case 24: {
            IsCrit = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BattleChangeMP : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BattleChangeMP> _parser = new pb::MessageParser<M2C_BattleChangeMP>(() => (M2C_BattleChangeMP)MessagePool.Instance.Fetch(typeof(M2C_BattleChangeMP)));
    public static pb::MessageParser<M2C_BattleChangeMP> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private int changeMPValue_;
    public int ChangeMPValue {
      get { return changeMPValue_; }
      set {
        changeMPValue_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (ChangeMPValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChangeMPValue);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (ChangeMPValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeMPValue);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      changeMPValue_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 16: {
            ChangeMPValue = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BattleChangeState : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BattleChangeState> _parser = new pb::MessageParser<M2C_BattleChangeState>(() => (M2C_BattleChangeState)MessagePool.Instance.Fetch(typeof(M2C_BattleChangeState)));
    public static pb::MessageParser<M2C_BattleChangeState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long targetUnitId_;
    public long TargetUnitId {
      get { return targetUnitId_; }
      set {
        targetUnitId_ = value;
      }
    }

    private int stateType_;
    public int StateType {
      get { return stateType_; }
      set {
        stateType_ = value;
      }
    }

    private int valueType_;
    public int ValueType {
      get { return valueType_; }
      set {
        valueType_ = value;
      }
    }

    private global::ET.M2C_BattleChangeState.Types.ChangeType type_ = 0;
    public global::ET.M2C_BattleChangeState.Types.ChangeType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private int time_;
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private bool isBuff_;
    public bool IsBuff {
      get { return isBuff_; }
      set {
        isBuff_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetUnitId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetUnitId);
      }
      if (StateType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StateType);
      }
      if (ValueType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ValueType);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Type);
      }
      if (Time != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Time);
      }
      if (IsBuff != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsBuff);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TargetUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetUnitId);
      }
      if (StateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateType);
      }
      if (ValueType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValueType);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (IsBuff != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      targetUnitId_ = 0;
      stateType_ = 0;
      valueType_ = 0;
      time_ = 0;
      isBuff_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            TargetUnitId = input.ReadInt64();
            break;
          }
          case 24: {
            StateType = input.ReadInt32();
            break;
          }
          case 32: {
            ValueType = input.ReadInt32();
            break;
          }
          case 48: {
            type_ = (global::ET.M2C_BattleChangeState.Types.ChangeType) input.ReadEnum();
            break;
          }
          case 56: {
            Time = input.ReadInt32();
            break;
          }
          case 64: {
            IsBuff = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the M2C_BattleChangeState message type.</summary>
    public static class Types {
      public enum ChangeType {
        None = 0,
        Add = 1,
        Reduce = 2,
      }

    }
    #endregion

  }

  public partial class M2C_BattleTouchState : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BattleTouchState> _parser = new pb::MessageParser<M2C_BattleTouchState>(() => (M2C_BattleTouchState)MessagePool.Instance.Fetch(typeof(M2C_BattleTouchState)));
    public static pb::MessageParser<M2C_BattleTouchState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private long targetUnitId_;
    public long TargetUnitId {
      get { return targetUnitId_; }
      set {
        targetUnitId_ = value;
      }
    }

    private int stateType_;
    public int StateType {
      get { return stateType_; }
      set {
        stateType_ = value;
      }
    }

    private int userData_;
    public int UserData {
      get { return userData_; }
      set {
        userData_ = value;
      }
    }

    private int effectId_;
    public int EffectId {
      get { return effectId_; }
      set {
        effectId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (TargetUnitId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetUnitId);
      }
      if (StateType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StateType);
      }
      if (UserData != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UserData);
      }
      if (EffectId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EffectId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (TargetUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetUnitId);
      }
      if (StateType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateType);
      }
      if (UserData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserData);
      }
      if (EffectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      targetUnitId_ = 0;
      stateType_ = 0;
      userData_ = 0;
      effectId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 16: {
            TargetUnitId = input.ReadInt64();
            break;
          }
          case 24: {
            StateType = input.ReadInt32();
            break;
          }
          case 32: {
            UserData = input.ReadInt32();
            break;
          }
          case 40: {
            EffectId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MainstoryMonsterDead : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MainstoryMonsterDead> _parser = new pb::MessageParser<M2C_MainstoryMonsterDead>(() => (M2C_MainstoryMonsterDead)MessagePool.Instance.Fetch(typeof(M2C_MainstoryMonsterDead)));
    public static pb::MessageParser<M2C_MainstoryMonsterDead> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_UnitDead : pb::IMessage {
    private static readonly pb::MessageParser<M2C_UnitDead> _parser = new pb::MessageParser<M2C_UnitDead>(() => (M2C_UnitDead)MessagePool.Instance.Fetch(typeof(M2C_UnitDead)));
    public static pb::MessageParser<M2C_UnitDead> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendReward : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendReward> _parser = new pb::MessageParser<M2C_SendReward>(() => (M2C_SendReward)MessagePool.Instance.Fetch(typeof(M2C_SendReward)));
    public static pb::MessageParser<M2C_SendReward> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ET.RewardItem> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.RewardItem.Parser);
    private pbc::RepeatedField<global::ET.RewardItem> itemList_ = new pbc::RepeatedField<global::ET.RewardItem>();
    public pbc::RepeatedField<global::ET.RewardItem> ItemList {
      get { return itemList_; }
      set { itemList_ = value; }
    }

    private long exp_;
    public long Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    private long coin_;
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (Exp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Exp);
      }
      if (Coin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Coin);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (Exp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Exp);
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < itemList_.Count; i++) { MessagePool.Instance.Recycle(itemList_[i]); }
      itemList_.Clear();
      exp_ = 0;
      coin_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 16: {
            Exp = input.ReadInt64();
            break;
          }
          case 24: {
            Coin = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetBattleStateBuff : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetBattleStateBuff> _parser = new pb::MessageParser<C2M_GetBattleStateBuff>(() => (C2M_GetBattleStateBuff)MessagePool.Instance.Fetch(typeof(C2M_GetBattleStateBuff)));
    public static pb::MessageParser<C2M_GetBattleStateBuff> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetBattleStateBuff : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetBattleStateBuff> _parser = new pb::MessageParser<M2C_GetBattleStateBuff>(() => (M2C_GetBattleStateBuff)MessagePool.Instance.Fetch(typeof(M2C_GetBattleStateBuff)));
    public static pb::MessageParser<M2C_GetBattleStateBuff> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.StateBuffInfo> _repeated_infoList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.StateBuffInfo.Parser);
    private pbc::RepeatedField<global::ET.StateBuffInfo> infoList_ = new pbc::RepeatedField<global::ET.StateBuffInfo>();
    public pbc::RepeatedField<global::ET.StateBuffInfo> InfoList {
      get { return infoList_; }
      set { infoList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      infoList_.WriteTo(output, _repeated_infoList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += infoList_.CalculateSize(_repeated_infoList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < infoList_.Count; i++) { MessagePool.Instance.Recycle(infoList_[i]); }
      infoList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infoList_.AddEntriesFrom(input, _repeated_infoList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///==================战斗挂机====================
  /// </summary>
  public partial class C2M_StartBattleIdleFight : pb::IMessage {
    private static readonly pb::MessageParser<C2M_StartBattleIdleFight> _parser = new pb::MessageParser<C2M_StartBattleIdleFight>(() => (C2M_StartBattleIdleFight)MessagePool.Instance.Fetch(typeof(C2M_StartBattleIdleFight)));
    public static pb::MessageParser<C2M_StartBattleIdleFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int sceneId_;
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      sceneId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SceneId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_StartBattleIdleFight : pb::IMessage {
    private static readonly pb::MessageParser<M2C_StartBattleIdleFight> _parser = new pb::MessageParser<M2C_StartBattleIdleFight>(() => (M2C_StartBattleIdleFight)MessagePool.Instance.Fetch(typeof(M2C_StartBattleIdleFight)));
    public static pb::MessageParser<M2C_StartBattleIdleFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_EndBattleIdleFight : pb::IMessage {
    private static readonly pb::MessageParser<C2M_EndBattleIdleFight> _parser = new pb::MessageParser<C2M_EndBattleIdleFight>(() => (C2M_EndBattleIdleFight)MessagePool.Instance.Fetch(typeof(C2M_EndBattleIdleFight)));
    public static pb::MessageParser<C2M_EndBattleIdleFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_EndBattleIdleFight : pb::IMessage {
    private static readonly pb::MessageParser<M2C_EndBattleIdleFight> _parser = new pb::MessageParser<M2C_EndBattleIdleFight>(() => (M2C_EndBattleIdleFight)MessagePool.Instance.Fetch(typeof(M2C_EndBattleIdleFight)));
    public static pb::MessageParser<M2C_EndBattleIdleFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///=================试炼之地副本=================
  /// </summary>
  public partial class M2C_InitTrialCopyMap : pb::IMessage {
    private static readonly pb::MessageParser<M2C_InitTrialCopyMap> _parser = new pb::MessageParser<M2C_InitTrialCopyMap>(() => (M2C_InitTrialCopyMap)MessagePool.Instance.Fetch(typeof(M2C_InitTrialCopyMap)));
    public static pb::MessageParser<M2C_InitTrialCopyMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int trialCopyId_;
    public int TrialCopyId {
      get { return trialCopyId_; }
      set {
        trialCopyId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TrialCopyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrialCopyId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TrialCopyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrialCopyId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      trialCopyId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TrialCopyId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_StartTrialCopyFight : pb::IMessage {
    private static readonly pb::MessageParser<C2M_StartTrialCopyFight> _parser = new pb::MessageParser<C2M_StartTrialCopyFight>(() => (C2M_StartTrialCopyFight)MessagePool.Instance.Fetch(typeof(C2M_StartTrialCopyFight)));
    public static pb::MessageParser<C2M_StartTrialCopyFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_StartTrialCopyFight : pb::IMessage {
    private static readonly pb::MessageParser<M2C_StartTrialCopyFight> _parser = new pb::MessageParser<M2C_StartTrialCopyFight>(() => (M2C_StartTrialCopyFight)MessagePool.Instance.Fetch(typeof(M2C_StartTrialCopyFight)));
    public static pb::MessageParser<M2C_StartTrialCopyFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int trialCopyId_;
    public int TrialCopyId {
      get { return trialCopyId_; }
      set {
        trialCopyId_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_unitIdList_codec
        = pb::FieldCodec.ForInt64(18);
    private pbc::RepeatedField<long> unitIdList_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> UnitIdList {
      get { return unitIdList_; }
      set { unitIdList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TrialCopyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TrialCopyId);
      }
      unitIdList_.WriteTo(output, _repeated_unitIdList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (TrialCopyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrialCopyId);
      }
      size += unitIdList_.CalculateSize(_repeated_unitIdList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      trialCopyId_ = 0;
      unitIdList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TrialCopyId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            unitIdList_.AddEntriesFrom(input, _repeated_unitIdList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///===================PK==========================
  /// </summary>
  public partial class C2M_StartPKFight : pb::IMessage {
    private static readonly pb::MessageParser<C2M_StartPKFight> _parser = new pb::MessageParser<C2M_StartPKFight>(() => (C2M_StartPKFight)MessagePool.Instance.Fetch(typeof(C2M_StartPKFight)));
    public static pb::MessageParser<C2M_StartPKFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long targetId_;
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TargetId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      targetId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_StartPKFight : pb::IMessage {
    private static readonly pb::MessageParser<M2C_StartPKFight> _parser = new pb::MessageParser<M2C_StartPKFight>(() => (M2C_StartPKFight)MessagePool.Instance.Fetch(typeof(M2C_StartPKFight)));
    public static pb::MessageParser<M2C_StartPKFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendStartPK : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendStartPK> _parser = new pb::MessageParser<M2C_SendStartPK>(() => (M2C_SendStartPK)MessagePool.Instance.Fetch(typeof(M2C_SendStartPK)));
    public static pb::MessageParser<M2C_SendStartPK> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_targetIdList_codec
        = pb::FieldCodec.ForInt64(10);
    private pbc::RepeatedField<long> targetIdList_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> TargetIdList {
      get { return targetIdList_; }
      set { targetIdList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      targetIdList_.WriteTo(output, _repeated_targetIdList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += targetIdList_.CalculateSize(_repeated_targetIdList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      targetIdList_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            targetIdList_.AddEntriesFrom(input, _repeated_targetIdList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PKFightVictory : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PKFightVictory> _parser = new pb::MessageParser<M2C_PKFightVictory>(() => (M2C_PKFightVictory)MessagePool.Instance.Fetch(typeof(M2C_PKFightVictory)));
    public static pb::MessageParser<M2C_PKFightVictory> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PKFightDefeat : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PKFightDefeat> _parser = new pb::MessageParser<M2C_PKFightDefeat>(() => (M2C_PKFightDefeat)MessagePool.Instance.Fetch(typeof(M2C_PKFightDefeat)));
    public static pb::MessageParser<M2C_PKFightDefeat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_StartTestBattleFight : pb::IMessage {
    private static readonly pb::MessageParser<C2M_StartTestBattleFight> _parser = new pb::MessageParser<C2M_StartTestBattleFight>(() => (C2M_StartTestBattleFight)MessagePool.Instance.Fetch(typeof(C2M_StartTestBattleFight)));
    public static pb::MessageParser<C2M_StartTestBattleFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_StartTestBattleFight : pb::IMessage {
    private static readonly pb::MessageParser<M2C_StartTestBattleFight> _parser = new pb::MessageParser<M2C_StartTestBattleFight>(() => (M2C_StartTestBattleFight)MessagePool.Instance.Fetch(typeof(M2C_StartTestBattleFight)));
    public static pb::MessageParser<M2C_StartTestBattleFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_EndTestBattleFight : pb::IMessage {
    private static readonly pb::MessageParser<C2M_EndTestBattleFight> _parser = new pb::MessageParser<C2M_EndTestBattleFight>(() => (C2M_EndTestBattleFight)MessagePool.Instance.Fetch(typeof(C2M_EndTestBattleFight)));
    public static pb::MessageParser<C2M_EndTestBattleFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_EndTestBattleFight : pb::IMessage {
    private static readonly pb::MessageParser<M2C_EndTestBattleFight> _parser = new pb::MessageParser<M2C_EndTestBattleFight>(() => (M2C_EndTestBattleFight)MessagePool.Instance.Fetch(typeof(M2C_EndTestBattleFight)));
    public static pb::MessageParser<M2C_EndTestBattleFight> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
