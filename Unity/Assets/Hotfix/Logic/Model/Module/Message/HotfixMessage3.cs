// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage3.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ET {

  #region Enums
  /// <summary>
  ///=================家族===========================
  /// </summary>
  public enum FamilyPosition {
    FamilyLeader = 0,
    FamilyDeputyLeader = 1,
    FamilyMember = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  ///=================好友===========================
  /// </summary>
  public partial class FriendInfo : pb::IMessage {
    private static readonly pb::MessageParser<FriendInfo> _parser = new pb::MessageParser<FriendInfo>(() => (FriendInfo)MessagePool.Instance.Fetch(typeof(FriendInfo)));
    public static pb::MessageParser<FriendInfo> Parser { get { return _parser; } }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ET.JobType job_ = 0;
    public global::ET.JobType Job {
      get { return job_; }
      set {
        job_ = value;
      }
    }

    private int level_;
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private long lastLginTime_;
    public long LastLginTime {
      get { return lastLginTime_; }
      set {
        lastLginTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Job != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Job);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (LastLginTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastLginTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Job != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Job);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (LastLginTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLginTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      name_ = "";
      level_ = 0;
      lastLginTime_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            job_ = (global::ET.JobType) input.ReadEnum();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            LastLginTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class RequestAddFriendInfo : pb::IMessage {
    private static readonly pb::MessageParser<RequestAddFriendInfo> _parser = new pb::MessageParser<RequestAddFriendInfo>(() => (RequestAddFriendInfo)MessagePool.Instance.Fetch(typeof(RequestAddFriendInfo)));
    public static pb::MessageParser<RequestAddFriendInfo> Parser { get { return _parser; } }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int level_;
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private global::ET.JobType job_ = 0;
    public global::ET.JobType Job {
      get { return job_; }
      set {
        job_ = value;
      }
    }

    private global::ET.SexType sex_ = 0;
    public global::ET.SexType Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Job != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Job);
      }
      if (Sex != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Sex);
      }
      if (Id != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Job != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Job);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sex);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      level_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            job_ = (global::ET.JobType) input.ReadEnum();
            break;
          }
          case 32: {
            sex_ = (global::ET.SexType) input.ReadEnum();
            break;
          }
          case 40: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetFriend : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetFriend> _parser = new pb::MessageParser<C2M_GetFriend>(() => (C2M_GetFriend)MessagePool.Instance.Fetch(typeof(C2M_GetFriend)));
    public static pb::MessageParser<C2M_GetFriend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetFriend : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetFriend> _parser = new pb::MessageParser<M2C_GetFriend>(() => (M2C_GetFriend)MessagePool.Instance.Fetch(typeof(M2C_GetFriend)));
    public static pb::MessageParser<M2C_GetFriend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.FriendInfo> _repeated_friendInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.FriendInfo.Parser);
    private pbc::RepeatedField<global::ET.FriendInfo> friendInfoList_ = new pbc::RepeatedField<global::ET.FriendInfo>();
    public pbc::RepeatedField<global::ET.FriendInfo> FriendInfoList {
      get { return friendInfoList_; }
      set { friendInfoList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ET.RequestAddFriendInfo> _repeated_requestInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.RequestAddFriendInfo.Parser);
    private pbc::RepeatedField<global::ET.RequestAddFriendInfo> requestInfoList_ = new pbc::RepeatedField<global::ET.RequestAddFriendInfo>();
    public pbc::RepeatedField<global::ET.RequestAddFriendInfo> RequestInfoList {
      get { return requestInfoList_; }
      set { requestInfoList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      friendInfoList_.WriteTo(output, _repeated_friendInfoList_codec);
      requestInfoList_.WriteTo(output, _repeated_requestInfoList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += friendInfoList_.CalculateSize(_repeated_friendInfoList_codec);
      size += requestInfoList_.CalculateSize(_repeated_requestInfoList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < friendInfoList_.Count; i++) { MessagePool.Instance.Recycle(friendInfoList_[i]); }
      friendInfoList_.Clear();
      for (int i = 0; i < requestInfoList_.Count; i++) { MessagePool.Instance.Recycle(requestInfoList_[i]); }
      requestInfoList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            friendInfoList_.AddEntriesFrom(input, _repeated_friendInfoList_codec);
            break;
          }
          case 18: {
            requestInfoList_.AddEntriesFrom(input, _repeated_requestInfoList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_FindFriend : pb::IMessage {
    private static readonly pb::MessageParser<C2M_FindFriend> _parser = new pb::MessageParser<C2M_FindFriend>(() => (C2M_FindFriend)MessagePool.Instance.Fetch(typeof(C2M_FindFriend)));
    public static pb::MessageParser<C2M_FindFriend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_FindFriend : pb::IMessage {
    private static readonly pb::MessageParser<M2C_FindFriend> _parser = new pb::MessageParser<M2C_FindFriend>(() => (M2C_FindFriend)MessagePool.Instance.Fetch(typeof(M2C_FindFriend)));
    public static pb::MessageParser<M2C_FindFriend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_AddFriend : pb::IMessage {
    private static readonly pb::MessageParser<C2M_AddFriend> _parser = new pb::MessageParser<C2M_AddFriend>(() => (C2M_AddFriend)MessagePool.Instance.Fetch(typeof(C2M_AddFriend)));
    public static pb::MessageParser<C2M_AddFriend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_AddFriend : pb::IMessage {
    private static readonly pb::MessageParser<M2C_AddFriend> _parser = new pb::MessageParser<M2C_AddFriend>(() => (M2C_AddFriend)MessagePool.Instance.Fetch(typeof(M2C_AddFriend)));
    public static pb::MessageParser<M2C_AddFriend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendAddFriendRequest : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendAddFriendRequest> _parser = new pb::MessageParser<M2C_SendAddFriendRequest>(() => (M2C_SendAddFriendRequest)MessagePool.Instance.Fetch(typeof(M2C_SendAddFriendRequest)));
    public static pb::MessageParser<M2C_SendAddFriendRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_HandleAddFriend : pb::IMessage {
    private static readonly pb::MessageParser<C2M_HandleAddFriend> _parser = new pb::MessageParser<C2M_HandleAddFriend>(() => (C2M_HandleAddFriend)MessagePool.Instance.Fetch(typeof(C2M_HandleAddFriend)));
    public static pb::MessageParser<C2M_HandleAddFriend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private bool isAgree_;
    public bool IsAgree {
      get { return isAgree_; }
      set {
        isAgree_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsAgree != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsAgree);
      }
      if (Id != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (IsAgree != false) {
        size += 1 + 1;
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isAgree_ = false;
      id_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsAgree = input.ReadBool();
            break;
          }
          case 16: {
            Id = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_HandleAddFriend : pb::IMessage {
    private static readonly pb::MessageParser<M2C_HandleAddFriend> _parser = new pb::MessageParser<M2C_HandleAddFriend>(() => (M2C_HandleAddFriend)MessagePool.Instance.Fetch(typeof(M2C_HandleAddFriend)));
    public static pb::MessageParser<M2C_HandleAddFriend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.FriendInfo> _repeated_friendInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.FriendInfo.Parser);
    private pbc::RepeatedField<global::ET.FriendInfo> friendInfoList_ = new pbc::RepeatedField<global::ET.FriendInfo>();
    public pbc::RepeatedField<global::ET.FriendInfo> FriendInfoList {
      get { return friendInfoList_; }
      set { friendInfoList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ET.RequestAddFriendInfo> _repeated_requestInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.RequestAddFriendInfo.Parser);
    private pbc::RepeatedField<global::ET.RequestAddFriendInfo> requestInfoList_ = new pbc::RepeatedField<global::ET.RequestAddFriendInfo>();
    public pbc::RepeatedField<global::ET.RequestAddFriendInfo> RequestInfoList {
      get { return requestInfoList_; }
      set { requestInfoList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      friendInfoList_.WriteTo(output, _repeated_friendInfoList_codec);
      requestInfoList_.WriteTo(output, _repeated_requestInfoList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += friendInfoList_.CalculateSize(_repeated_friendInfoList_codec);
      size += requestInfoList_.CalculateSize(_repeated_requestInfoList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < friendInfoList_.Count; i++) { MessagePool.Instance.Recycle(friendInfoList_[i]); }
      friendInfoList_.Clear();
      for (int i = 0; i < requestInfoList_.Count; i++) { MessagePool.Instance.Recycle(requestInfoList_[i]); }
      requestInfoList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            friendInfoList_.AddEntriesFrom(input, _repeated_friendInfoList_codec);
            break;
          }
          case 18: {
            requestInfoList_.AddEntriesFrom(input, _repeated_requestInfoList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_HandleAddFriendResult : pb::IMessage {
    private static readonly pb::MessageParser<M2C_HandleAddFriendResult> _parser = new pb::MessageParser<M2C_HandleAddFriendResult>(() => (M2C_HandleAddFriendResult)MessagePool.Instance.Fetch(typeof(M2C_HandleAddFriendResult)));
    public static pb::MessageParser<M2C_HandleAddFriendResult> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_DeleteFriend : pb::IMessage {
    private static readonly pb::MessageParser<C2M_DeleteFriend> _parser = new pb::MessageParser<C2M_DeleteFriend>(() => (C2M_DeleteFriend)MessagePool.Instance.Fetch(typeof(C2M_DeleteFriend)));
    public static pb::MessageParser<C2M_DeleteFriend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_DeleteFriend : pb::IMessage {
    private static readonly pb::MessageParser<M2C_DeleteFriend> _parser = new pb::MessageParser<M2C_DeleteFriend>(() => (M2C_DeleteFriend)MessagePool.Instance.Fetch(typeof(M2C_DeleteFriend)));
    public static pb::MessageParser<M2C_DeleteFriend> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.FriendInfo> _repeated_friendInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.FriendInfo.Parser);
    private pbc::RepeatedField<global::ET.FriendInfo> friendInfoList_ = new pbc::RepeatedField<global::ET.FriendInfo>();
    public pbc::RepeatedField<global::ET.FriendInfo> FriendInfoList {
      get { return friendInfoList_; }
      set { friendInfoList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      friendInfoList_.WriteTo(output, _repeated_friendInfoList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += friendInfoList_.CalculateSize(_repeated_friendInfoList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < friendInfoList_.Count; i++) { MessagePool.Instance.Recycle(friendInfoList_[i]); }
      friendInfoList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            friendInfoList_.AddEntriesFrom(input, _repeated_friendInfoList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class FamilyMemberInfo : pb::IMessage {
    private static readonly pb::MessageParser<FamilyMemberInfo> _parser = new pb::MessageParser<FamilyMemberInfo>(() => (FamilyMemberInfo)MessagePool.Instance.Fetch(typeof(FamilyMemberInfo)));
    public static pb::MessageParser<FamilyMemberInfo> Parser { get { return _parser; } }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ET.JobType job_ = 0;
    public global::ET.JobType Job {
      get { return job_; }
      set {
        job_ = value;
      }
    }

    private int level_;
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private long lastLginTime_;
    public long LastLginTime {
      get { return lastLginTime_; }
      set {
        lastLginTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Job != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Job);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (LastLginTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastLginTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Job != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Job);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (LastLginTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLginTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      name_ = "";
      level_ = 0;
      lastLginTime_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            job_ = (global::ET.JobType) input.ReadEnum();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            LastLginTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class FamilyPositionMap : pb::IMessage {
    private static readonly pb::MessageParser<FamilyPositionMap> _parser = new pb::MessageParser<FamilyPositionMap>(() => (FamilyPositionMap)MessagePool.Instance.Fetch(typeof(FamilyPositionMap)));
    public static pb::MessageParser<FamilyPositionMap> Parser { get { return _parser; } }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ET.FamilyPosition position_ = 0;
    public global::ET.FamilyPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Position);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Position);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            position_ = (global::ET.FamilyPosition) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public partial class FamilyInfo : pb::IMessage {
    private static readonly pb::MessageParser<FamilyInfo> _parser = new pb::MessageParser<FamilyInfo>(() => (FamilyInfo)MessagePool.Instance.Fetch(typeof(FamilyInfo)));
    public static pb::MessageParser<FamilyInfo> Parser { get { return _parser; } }

    private int level_;
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private int hornor_;
    public int Hornor {
      get { return hornor_; }
      set {
        hornor_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.FamilyPositionMap> _repeated_positinMapList_codec
        = pb::FieldCodec.ForMessage(34, global::ET.FamilyPositionMap.Parser);
    private pbc::RepeatedField<global::ET.FamilyPositionMap> positinMapList_ = new pbc::RepeatedField<global::ET.FamilyPositionMap>();
    public pbc::RepeatedField<global::ET.FamilyPositionMap> PositinMapList {
      get { return positinMapList_; }
      set { positinMapList_ = value; }
    }

    private string notice_ = "";
    public string Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Hornor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hornor);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      positinMapList_.WriteTo(output, _repeated_positinMapList_codec);
      if (Notice.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Notice);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Hornor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hornor);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += positinMapList_.CalculateSize(_repeated_positinMapList_codec);
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      level_ = 0;
      hornor_ = 0;
      name_ = "";
      for (int i = 0; i < positinMapList_.Count; i++) { MessagePool.Instance.Recycle(positinMapList_[i]); }
      positinMapList_.Clear();
      notice_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Hornor = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            positinMapList_.AddEntriesFrom(input, _repeated_positinMapList_codec);
            break;
          }
          case 42: {
            Notice = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_CrateFamily : pb::IMessage {
    private static readonly pb::MessageParser<C2M_CrateFamily> _parser = new pb::MessageParser<C2M_CrateFamily>(() => (C2M_CrateFamily)MessagePool.Instance.Fetch(typeof(C2M_CrateFamily)));
    public static pb::MessageParser<C2M_CrateFamily> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_CrateFamily : pb::IMessage {
    private static readonly pb::MessageParser<M2C_CrateFamily> _parser = new pb::MessageParser<M2C_CrateFamily>(() => (M2C_CrateFamily)MessagePool.Instance.Fetch(typeof(M2C_CrateFamily)));
    public static pb::MessageParser<M2C_CrateFamily> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.FamilyMemberInfo> _repeated_familyMemberInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.FamilyMemberInfo.Parser);
    private pbc::RepeatedField<global::ET.FamilyMemberInfo> familyMemberInfoList_ = new pbc::RepeatedField<global::ET.FamilyMemberInfo>();
    public pbc::RepeatedField<global::ET.FamilyMemberInfo> FamilyMemberInfoList {
      get { return familyMemberInfoList_; }
      set { familyMemberInfoList_ = value; }
    }

    private global::ET.FamilyInfo info_;
    public global::ET.FamilyInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      familyMemberInfoList_.WriteTo(output, _repeated_familyMemberInfoList_codec);
      if (info_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += familyMemberInfoList_.CalculateSize(_repeated_familyMemberInfoList_codec);
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < familyMemberInfoList_.Count; i++) { MessagePool.Instance.Recycle(familyMemberInfoList_[i]); }
      familyMemberInfoList_.Clear();
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            familyMemberInfoList_.AddEntriesFrom(input, _repeated_familyMemberInfoList_codec);
            break;
          }
          case 26: {
            if (info_ == null) {
              info_ = new global::ET.FamilyInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetFamily : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetFamily> _parser = new pb::MessageParser<C2M_GetFamily>(() => (C2M_GetFamily)MessagePool.Instance.Fetch(typeof(C2M_GetFamily)));
    public static pb::MessageParser<C2M_GetFamily> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetFamily : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetFamily> _parser = new pb::MessageParser<M2C_GetFamily>(() => (M2C_GetFamily)MessagePool.Instance.Fetch(typeof(M2C_GetFamily)));
    public static pb::MessageParser<M2C_GetFamily> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.FamilyMemberInfo> _repeated_familyMemberInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.FamilyMemberInfo.Parser);
    private pbc::RepeatedField<global::ET.FamilyMemberInfo> familyMemberInfoList_ = new pbc::RepeatedField<global::ET.FamilyMemberInfo>();
    public pbc::RepeatedField<global::ET.FamilyMemberInfo> FamilyMemberInfoList {
      get { return familyMemberInfoList_; }
      set { familyMemberInfoList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ET.RequestAddFriendInfo> _repeated_requestInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.RequestAddFriendInfo.Parser);
    private pbc::RepeatedField<global::ET.RequestAddFriendInfo> requestInfoList_ = new pbc::RepeatedField<global::ET.RequestAddFriendInfo>();
    public pbc::RepeatedField<global::ET.RequestAddFriendInfo> RequestInfoList {
      get { return requestInfoList_; }
      set { requestInfoList_ = value; }
    }

    private global::ET.FamilyInfo info_;
    public global::ET.FamilyInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      familyMemberInfoList_.WriteTo(output, _repeated_familyMemberInfoList_codec);
      requestInfoList_.WriteTo(output, _repeated_requestInfoList_codec);
      if (info_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += familyMemberInfoList_.CalculateSize(_repeated_familyMemberInfoList_codec);
      size += requestInfoList_.CalculateSize(_repeated_requestInfoList_codec);
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < familyMemberInfoList_.Count; i++) { MessagePool.Instance.Recycle(familyMemberInfoList_[i]); }
      familyMemberInfoList_.Clear();
      for (int i = 0; i < requestInfoList_.Count; i++) { MessagePool.Instance.Recycle(requestInfoList_[i]); }
      requestInfoList_.Clear();
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            familyMemberInfoList_.AddEntriesFrom(input, _repeated_familyMemberInfoList_codec);
            break;
          }
          case 18: {
            requestInfoList_.AddEntriesFrom(input, _repeated_requestInfoList_codec);
            break;
          }
          case 26: {
            if (info_ == null) {
              info_ = new global::ET.FamilyInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_FindFamily : pb::IMessage {
    private static readonly pb::MessageParser<C2M_FindFamily> _parser = new pb::MessageParser<C2M_FindFamily>(() => (C2M_FindFamily)MessagePool.Instance.Fetch(typeof(C2M_FindFamily)));
    public static pb::MessageParser<C2M_FindFamily> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_FindFamily : pb::IMessage {
    private static readonly pb::MessageParser<M2C_FindFamily> _parser = new pb::MessageParser<M2C_FindFamily>(() => (M2C_FindFamily)MessagePool.Instance.Fetch(typeof(M2C_FindFamily)));
    public static pb::MessageParser<M2C_FindFamily> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_DeleteFamily : pb::IMessage {
    private static readonly pb::MessageParser<C2M_DeleteFamily> _parser = new pb::MessageParser<C2M_DeleteFamily>(() => (C2M_DeleteFamily)MessagePool.Instance.Fetch(typeof(C2M_DeleteFamily)));
    public static pb::MessageParser<C2M_DeleteFamily> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_DeleteFamily : pb::IMessage {
    private static readonly pb::MessageParser<M2C_DeleteFamily> _parser = new pb::MessageParser<M2C_DeleteFamily>(() => (M2C_DeleteFamily)MessagePool.Instance.Fetch(typeof(M2C_DeleteFamily)));
    public static pb::MessageParser<M2C_DeleteFamily> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_RequestEnterFamily : pb::IMessage {
    private static readonly pb::MessageParser<C2M_RequestEnterFamily> _parser = new pb::MessageParser<C2M_RequestEnterFamily>(() => (C2M_RequestEnterFamily)MessagePool.Instance.Fetch(typeof(C2M_RequestEnterFamily)));
    public static pb::MessageParser<C2M_RequestEnterFamily> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_RequestEnterFamily : pb::IMessage {
    private static readonly pb::MessageParser<M2C_RequestEnterFamily> _parser = new pb::MessageParser<M2C_RequestEnterFamily>(() => (M2C_RequestEnterFamily)MessagePool.Instance.Fetch(typeof(M2C_RequestEnterFamily)));
    public static pb::MessageParser<M2C_RequestEnterFamily> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.FamilyMemberInfo> _repeated_familyMemberInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.FamilyMemberInfo.Parser);
    private pbc::RepeatedField<global::ET.FamilyMemberInfo> familyMemberInfoList_ = new pbc::RepeatedField<global::ET.FamilyMemberInfo>();
    public pbc::RepeatedField<global::ET.FamilyMemberInfo> FamilyMemberInfoList {
      get { return familyMemberInfoList_; }
      set { familyMemberInfoList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ET.RequestAddFriendInfo> _repeated_requestInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.RequestAddFriendInfo.Parser);
    private pbc::RepeatedField<global::ET.RequestAddFriendInfo> requestInfoList_ = new pbc::RepeatedField<global::ET.RequestAddFriendInfo>();
    public pbc::RepeatedField<global::ET.RequestAddFriendInfo> RequestInfoList {
      get { return requestInfoList_; }
      set { requestInfoList_ = value; }
    }

    private global::ET.FamilyInfo info_;
    public global::ET.FamilyInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      familyMemberInfoList_.WriteTo(output, _repeated_familyMemberInfoList_codec);
      requestInfoList_.WriteTo(output, _repeated_requestInfoList_codec);
      if (info_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += familyMemberInfoList_.CalculateSize(_repeated_familyMemberInfoList_codec);
      size += requestInfoList_.CalculateSize(_repeated_requestInfoList_codec);
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < familyMemberInfoList_.Count; i++) { MessagePool.Instance.Recycle(familyMemberInfoList_[i]); }
      familyMemberInfoList_.Clear();
      for (int i = 0; i < requestInfoList_.Count; i++) { MessagePool.Instance.Recycle(requestInfoList_[i]); }
      requestInfoList_.Clear();
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            familyMemberInfoList_.AddEntriesFrom(input, _repeated_familyMemberInfoList_codec);
            break;
          }
          case 18: {
            requestInfoList_.AddEntriesFrom(input, _repeated_requestInfoList_codec);
            break;
          }
          case 26: {
            if (info_ == null) {
              info_ = new global::ET.FamilyInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_LeaveFamily : pb::IMessage {
    private static readonly pb::MessageParser<C2M_LeaveFamily> _parser = new pb::MessageParser<C2M_LeaveFamily>(() => (C2M_LeaveFamily)MessagePool.Instance.Fetch(typeof(C2M_LeaveFamily)));
    public static pb::MessageParser<C2M_LeaveFamily> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_LeaveFamily : pb::IMessage {
    private static readonly pb::MessageParser<M2C_LeaveFamily> _parser = new pb::MessageParser<M2C_LeaveFamily>(() => (M2C_LeaveFamily)MessagePool.Instance.Fetch(typeof(M2C_LeaveFamily)));
    public static pb::MessageParser<M2C_LeaveFamily> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_HandleEnterFamiy : pb::IMessage {
    private static readonly pb::MessageParser<C2M_HandleEnterFamiy> _parser = new pb::MessageParser<C2M_HandleEnterFamiy>(() => (C2M_HandleEnterFamiy)MessagePool.Instance.Fetch(typeof(C2M_HandleEnterFamiy)));
    public static pb::MessageParser<C2M_HandleEnterFamiy> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private bool isAgree_;
    public bool IsAgree {
      get { return isAgree_; }
      set {
        isAgree_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsAgree != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsAgree);
      }
      if (Id != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Id);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (IsAgree != false) {
        size += 1 + 1;
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isAgree_ = false;
      id_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsAgree = input.ReadBool();
            break;
          }
          case 16: {
            Id = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_HandleEnterFamiy : pb::IMessage {
    private static readonly pb::MessageParser<M2C_HandleEnterFamiy> _parser = new pb::MessageParser<M2C_HandleEnterFamiy>(() => (M2C_HandleEnterFamiy)MessagePool.Instance.Fetch(typeof(M2C_HandleEnterFamiy)));
    public static pb::MessageParser<M2C_HandleEnterFamiy> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.FamilyMemberInfo> _repeated_familyMemberInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.FamilyMemberInfo.Parser);
    private pbc::RepeatedField<global::ET.FamilyMemberInfo> familyMemberInfoList_ = new pbc::RepeatedField<global::ET.FamilyMemberInfo>();
    public pbc::RepeatedField<global::ET.FamilyMemberInfo> FamilyMemberInfoList {
      get { return familyMemberInfoList_; }
      set { familyMemberInfoList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ET.RequestAddFriendInfo> _repeated_requestInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.RequestAddFriendInfo.Parser);
    private pbc::RepeatedField<global::ET.RequestAddFriendInfo> requestInfoList_ = new pbc::RepeatedField<global::ET.RequestAddFriendInfo>();
    public pbc::RepeatedField<global::ET.RequestAddFriendInfo> RequestInfoList {
      get { return requestInfoList_; }
      set { requestInfoList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      familyMemberInfoList_.WriteTo(output, _repeated_familyMemberInfoList_codec);
      requestInfoList_.WriteTo(output, _repeated_requestInfoList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += familyMemberInfoList_.CalculateSize(_repeated_familyMemberInfoList_codec);
      size += requestInfoList_.CalculateSize(_repeated_requestInfoList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < familyMemberInfoList_.Count; i++) { MessagePool.Instance.Recycle(familyMemberInfoList_[i]); }
      familyMemberInfoList_.Clear();
      for (int i = 0; i < requestInfoList_.Count; i++) { MessagePool.Instance.Recycle(requestInfoList_[i]); }
      requestInfoList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            familyMemberInfoList_.AddEntriesFrom(input, _repeated_familyMemberInfoList_codec);
            break;
          }
          case 18: {
            requestInfoList_.AddEntriesFrom(input, _repeated_requestInfoList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_DeleteFamilyMember : pb::IMessage {
    private static readonly pb::MessageParser<C2M_DeleteFamilyMember> _parser = new pb::MessageParser<C2M_DeleteFamilyMember>(() => (C2M_DeleteFamilyMember)MessagePool.Instance.Fetch(typeof(C2M_DeleteFamilyMember)));
    public static pb::MessageParser<C2M_DeleteFamilyMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_DeleteFamilyMember : pb::IMessage {
    private static readonly pb::MessageParser<M2C_DeleteFamilyMember> _parser = new pb::MessageParser<M2C_DeleteFamilyMember>(() => (M2C_DeleteFamilyMember)MessagePool.Instance.Fetch(typeof(M2C_DeleteFamilyMember)));
    public static pb::MessageParser<M2C_DeleteFamilyMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.FamilyMemberInfo> _repeated_familyMemberInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.FamilyMemberInfo.Parser);
    private pbc::RepeatedField<global::ET.FamilyMemberInfo> familyMemberInfoList_ = new pbc::RepeatedField<global::ET.FamilyMemberInfo>();
    public pbc::RepeatedField<global::ET.FamilyMemberInfo> FamilyMemberInfoList {
      get { return familyMemberInfoList_; }
      set { familyMemberInfoList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      familyMemberInfoList_.WriteTo(output, _repeated_familyMemberInfoList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += familyMemberInfoList_.CalculateSize(_repeated_familyMemberInfoList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < familyMemberInfoList_.Count; i++) { MessagePool.Instance.Recycle(familyMemberInfoList_[i]); }
      familyMemberInfoList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            familyMemberInfoList_.AddEntriesFrom(input, _repeated_familyMemberInfoList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///=================组队============================
  ///玩家处理信息
  /// </summary>
  public partial class HandleInfo : pb::IMessage {
    private static readonly pb::MessageParser<HandleInfo> _parser = new pb::MessageParser<HandleInfo>(() => (HandleInfo)MessagePool.Instance.Fetch(typeof(HandleInfo)));
    public static pb::MessageParser<HandleInfo> Parser { get { return _parser; } }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private bool bool_;
    public bool Bool {
      get { return bool_; }
      set {
        bool_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Bool != false) {
        output.WriteRawTag(16);
        output.WriteBool(Bool);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Bool != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      bool_ = false;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Bool = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_RequestTeam : pb::IMessage {
    private static readonly pb::MessageParser<C2M_RequestTeam> _parser = new pb::MessageParser<C2M_RequestTeam>(() => (C2M_RequestTeam)MessagePool.Instance.Fetch(typeof(C2M_RequestTeam)));
    public static pb::MessageParser<C2M_RequestTeam> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long targetId_;
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TargetId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      targetId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_RequestTeam : pb::IMessage {
    private static readonly pb::MessageParser<M2C_RequestTeam> _parser = new pb::MessageParser<M2C_RequestTeam>(() => (M2C_RequestTeam)MessagePool.Instance.Fetch(typeof(M2C_RequestTeam)));
    public static pb::MessageParser<M2C_RequestTeam> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_InviteTeam : pb::IMessage {
    private static readonly pb::MessageParser<C2M_InviteTeam> _parser = new pb::MessageParser<C2M_InviteTeam>(() => (C2M_InviteTeam)MessagePool.Instance.Fetch(typeof(C2M_InviteTeam)));
    public static pb::MessageParser<C2M_InviteTeam> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long targetId_;
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TargetId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      targetId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_InviteTeam : pb::IMessage {
    private static readonly pb::MessageParser<M2C_InviteTeam> _parser = new pb::MessageParser<M2C_InviteTeam>(() => (M2C_InviteTeam)MessagePool.Instance.Fetch(typeof(M2C_InviteTeam)));
    public static pb::MessageParser<M2C_InviteTeam> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_RequestList : pb::IMessage {
    private static readonly pb::MessageParser<M2C_RequestList> _parser = new pb::MessageParser<M2C_RequestList>(() => (M2C_RequestList)MessagePool.Instance.Fetch(typeof(M2C_RequestList)));
    public static pb::MessageParser<M2C_RequestList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private int timeOut_;
    public int TimeOut {
      get { return timeOut_; }
      set {
        timeOut_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (TimeOut != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimeOut);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (TimeOut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeOut);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      timeOut_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 16: {
            TimeOut = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_InviteList : pb::IMessage {
    private static readonly pb::MessageParser<M2C_InviteList> _parser = new pb::MessageParser<M2C_InviteList>(() => (M2C_InviteList)MessagePool.Instance.Fetch(typeof(M2C_InviteList)));
    public static pb::MessageParser<M2C_InviteList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private int timeOut_;
    public int TimeOut {
      get { return timeOut_; }
      set {
        timeOut_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (TimeOut != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimeOut);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (TimeOut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeOut);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      timeOut_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 16: {
            TimeOut = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_HandleTeam : pb::IMessage {
    private static readonly pb::MessageParser<C2M_HandleTeam> _parser = new pb::MessageParser<C2M_HandleTeam>(() => (C2M_HandleTeam)MessagePool.Instance.Fetch(typeof(C2M_HandleTeam)));
    public static pb::MessageParser<C2M_HandleTeam> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ET.HandleInfo handleInfo_;
    public global::ET.HandleInfo HandleInfo {
      get { return handleInfo_; }
      set {
        handleInfo_ = value;
      }
    }

    private bool isRequest_;
    public bool IsRequest {
      get { return isRequest_; }
      set {
        isRequest_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (handleInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HandleInfo);
      }
      if (IsRequest != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsRequest);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (handleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HandleInfo);
      }
      if (IsRequest != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (handleInfo_ != null) MessagePool.Instance.Recycle(handleInfo_); handleInfo_ = null;
      isRequest_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (handleInfo_ == null) {
              handleInfo_ = new global::ET.HandleInfo();
            }
            input.ReadMessage(handleInfo_);
            break;
          }
          case 16: {
            IsRequest = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_HandleTeam : pb::IMessage {
    private static readonly pb::MessageParser<M2C_HandleTeam> _parser = new pb::MessageParser<M2C_HandleTeam>(() => (M2C_HandleTeam)MessagePool.Instance.Fetch(typeof(M2C_HandleTeam)));
    public static pb::MessageParser<M2C_HandleTeam> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamMember : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamMember> _parser = new pb::MessageParser<M2C_TeamMember>(() => (M2C_TeamMember)MessagePool.Instance.Fetch(typeof(M2C_TeamMember)));
    public static pb::MessageParser<M2C_TeamMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long leaderId_;
    public long LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_unitIds_codec
        = pb::FieldCodec.ForInt64(18);
    private pbc::RepeatedField<long> unitIds_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> UnitIds {
      get { return unitIds_; }
      set { unitIds_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LeaderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LeaderId);
      }
      unitIds_.WriteTo(output, _repeated_unitIds_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (LeaderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeaderId);
      }
      size += unitIds_.CalculateSize(_repeated_unitIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      leaderId_ = 0;
      unitIds_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LeaderId = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            unitIds_.AddEntriesFrom(input, _repeated_unitIds_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TransferTeamLeader : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TransferTeamLeader> _parser = new pb::MessageParser<C2M_TransferTeamLeader>(() => (C2M_TransferTeamLeader)MessagePool.Instance.Fetch(typeof(C2M_TransferTeamLeader)));
    public static pb::MessageParser<C2M_TransferTeamLeader> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TransferTeamLeader : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TransferTeamLeader> _parser = new pb::MessageParser<M2C_TransferTeamLeader>(() => (M2C_TransferTeamLeader)MessagePool.Instance.Fetch(typeof(M2C_TransferTeamLeader)));
    public static pb::MessageParser<M2C_TransferTeamLeader> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_QuitTeam : pb::IMessage {
    private static readonly pb::MessageParser<C2M_QuitTeam> _parser = new pb::MessageParser<C2M_QuitTeam>(() => (C2M_QuitTeam)MessagePool.Instance.Fetch(typeof(C2M_QuitTeam)));
    public static pb::MessageParser<C2M_QuitTeam> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_QuitTeam : pb::IMessage {
    private static readonly pb::MessageParser<M2C_QuitTeam> _parser = new pb::MessageParser<M2C_QuitTeam>(() => (M2C_QuitTeam)MessagePool.Instance.Fetch(typeof(M2C_QuitTeam)));
    public static pb::MessageParser<M2C_QuitTeam> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_KickoutTeam : pb::IMessage {
    private static readonly pb::MessageParser<C2M_KickoutTeam> _parser = new pb::MessageParser<C2M_KickoutTeam>(() => (C2M_KickoutTeam)MessagePool.Instance.Fetch(typeof(C2M_KickoutTeam)));
    public static pb::MessageParser<C2M_KickoutTeam> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long targetId_;
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TargetId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      targetId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_KickoutTeam : pb::IMessage {
    private static readonly pb::MessageParser<M2C_KickoutTeam> _parser = new pb::MessageParser<M2C_KickoutTeam>(() => (M2C_KickoutTeam)MessagePool.Instance.Fetch(typeof(M2C_KickoutTeam)));
    public static pb::MessageParser<M2C_KickoutTeam> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
