// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage7.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ET {

  #region Enums
  /// <summary>
  ///=================邮箱======================
  /// </summary>
  public enum MailState {
    UnReceive = 0,
    Received = 1,
  }

  /// <summary>
  ///==============聊天=========================
  /// </summary>
  public enum ChatType {
    NoneChat = 0,
    Normal = 1,
    Team = 2,
    Family = 3,
    Camp = 4,
    World = 5,
    Private = 6,
    System = 7,
  }

  #endregion

  #region Messages
  public partial class MailItem : pb::IMessage {
    private static readonly pb::MessageParser<MailItem> _parser = new pb::MessageParser<MailItem>(() => (MailItem)MessagePool.Instance.Fetch(typeof(MailItem)));
    public static pb::MessageParser<MailItem> Parser { get { return _parser; } }

    private int itemId_;
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    private global::ET.ItemType itemType_ = 0;
    public global::ET.ItemType ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    private long serverId_;
    public long ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    private long count_;
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private bool isLock_;
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    private bool isHasItem_;
    public bool IsHasItem {
      get { return isHasItem_; }
      set {
        isHasItem_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ItemType);
      }
      if (ServerId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ServerId);
      }
      if (Count != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Count);
      }
      if (IsLock != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsLock);
      }
      if (IsHasItem != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsHasItem);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemType);
      }
      if (ServerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerId);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      if (IsHasItem != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      itemId_ = 0;
      serverId_ = 0;
      count_ = 0;
      isLock_ = false;
      isHasItem_ = false;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            itemType_ = (global::ET.ItemType) input.ReadEnum();
            break;
          }
          case 24: {
            ServerId = input.ReadInt64();
            break;
          }
          case 32: {
            Count = input.ReadInt64();
            break;
          }
          case 40: {
            IsLock = input.ReadBool();
            break;
          }
          case 48: {
            IsHasItem = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public partial class Mail : pb::IMessage {
    private static readonly pb::MessageParser<Mail> _parser = new pb::MessageParser<Mail>(() => (Mail)MessagePool.Instance.Fetch(typeof(Mail)));
    public static pb::MessageParser<Mail> Parser { get { return _parser; } }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private string title_ = "";
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long remainTime_;
    public long RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    private string senderName_ = "";
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.MailItem> _repeated_rewordArr_codec
        = pb::FieldCodec.ForMessage(50, global::ET.MailItem.Parser);
    private pbc::RepeatedField<global::ET.MailItem> rewordArr_ = new pbc::RepeatedField<global::ET.MailItem>();
    public pbc::RepeatedField<global::ET.MailItem> RewordArr {
      get { return rewordArr_; }
      set { rewordArr_ = value; }
    }

    private global::ET.MailState state_ = 0;
    public global::ET.MailState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (RemainTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RemainTime);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SenderName);
      }
      rewordArr_.WriteTo(output, _repeated_rewordArr_codec);
      if (State != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) State);
      }
      if (Id != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (RemainTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemainTime);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      size += rewordArr_.CalculateSize(_repeated_rewordArr_codec);
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      title_ = "";
      content_ = "";
      remainTime_ = 0;
      senderName_ = "";
      for (int i = 0; i < rewordArr_.Count; i++) { MessagePool.Instance.Recycle(rewordArr_[i]); }
      rewordArr_.Clear();
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            RemainTime = input.ReadInt64();
            break;
          }
          case 42: {
            SenderName = input.ReadString();
            break;
          }
          case 50: {
            rewordArr_.AddEntriesFrom(input, _repeated_rewordArr_codec);
            break;
          }
          case 56: {
            state_ = (global::ET.MailState) input.ReadEnum();
            break;
          }
          case 64: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetMail : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetMail> _parser = new pb::MessageParser<C2M_GetMail>(() => (C2M_GetMail)MessagePool.Instance.Fetch(typeof(C2M_GetMail)));
    public static pb::MessageParser<C2M_GetMail> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int page_;
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Page);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      page_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Page = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetMail : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetMail> _parser = new pb::MessageParser<M2C_GetMail>(() => (M2C_GetMail)MessagePool.Instance.Fetch(typeof(M2C_GetMail)));
    public static pb::MessageParser<M2C_GetMail> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.Mail> _repeated_mailList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.Mail.Parser);
    private pbc::RepeatedField<global::ET.Mail> mailList_ = new pbc::RepeatedField<global::ET.Mail>();
    public pbc::RepeatedField<global::ET.Mail> MailList {
      get { return mailList_; }
      set { mailList_ = value; }
    }

    private int mailCount_;
    public int MailCount {
      get { return mailCount_; }
      set {
        mailCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mailList_.WriteTo(output, _repeated_mailList_codec);
      if (MailCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MailCount);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += mailList_.CalculateSize(_repeated_mailList_codec);
      if (MailCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MailCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < mailList_.Count; i++) { MessagePool.Instance.Recycle(mailList_[i]); }
      mailList_.Clear();
      mailCount_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mailList_.AddEntriesFrom(input, _repeated_mailList_codec);
            break;
          }
          case 16: {
            MailCount = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_ReceiveMail : pb::IMessage {
    private static readonly pb::MessageParser<C2M_ReceiveMail> _parser = new pb::MessageParser<C2M_ReceiveMail>(() => (C2M_ReceiveMail)MessagePool.Instance.Fetch(typeof(C2M_ReceiveMail)));
    public static pb::MessageParser<C2M_ReceiveMail> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long mailId_;
    public long MailId {
      get { return mailId_; }
      set {
        mailId_ = value;
      }
    }

    private int page_;
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MailId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MailId);
      }
      if (Page != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Page);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MailId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MailId);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mailId_ = 0;
      page_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MailId = input.ReadInt64();
            break;
          }
          case 16: {
            Page = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_ReceiveMail : pb::IMessage {
    private static readonly pb::MessageParser<M2C_ReceiveMail> _parser = new pb::MessageParser<M2C_ReceiveMail>(() => (M2C_ReceiveMail)MessagePool.Instance.Fetch(typeof(M2C_ReceiveMail)));
    public static pb::MessageParser<M2C_ReceiveMail> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ET.Mail> _repeated_mailList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.Mail.Parser);
    private pbc::RepeatedField<global::ET.Mail> mailList_ = new pbc::RepeatedField<global::ET.Mail>();
    public pbc::RepeatedField<global::ET.Mail> MailList {
      get { return mailList_; }
      set { mailList_ = value; }
    }

    private int mailCount_;
    public int MailCount {
      get { return mailCount_; }
      set {
        mailCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      mailList_.WriteTo(output, _repeated_mailList_codec);
      if (MailCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MailCount);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      size += mailList_.CalculateSize(_repeated_mailList_codec);
      if (MailCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MailCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      for (int i = 0; i < mailList_.Count; i++) { MessagePool.Instance.Recycle(mailList_[i]); }
      mailList_.Clear();
      mailCount_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 18: {
            mailList_.AddEntriesFrom(input, _repeated_mailList_codec);
            break;
          }
          case 24: {
            MailCount = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_DeleteMail : pb::IMessage {
    private static readonly pb::MessageParser<C2M_DeleteMail> _parser = new pb::MessageParser<C2M_DeleteMail>(() => (C2M_DeleteMail)MessagePool.Instance.Fetch(typeof(C2M_DeleteMail)));
    public static pb::MessageParser<C2M_DeleteMail> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long mailId_;
    public long MailId {
      get { return mailId_; }
      set {
        mailId_ = value;
      }
    }

    private int page_;
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MailId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MailId);
      }
      if (Page != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Page);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MailId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MailId);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mailId_ = 0;
      page_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MailId = input.ReadInt64();
            break;
          }
          case 16: {
            Page = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_DeleteMail : pb::IMessage {
    private static readonly pb::MessageParser<M2C_DeleteMail> _parser = new pb::MessageParser<M2C_DeleteMail>(() => (M2C_DeleteMail)MessagePool.Instance.Fetch(typeof(M2C_DeleteMail)));
    public static pb::MessageParser<M2C_DeleteMail> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.Mail> _repeated_mailList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.Mail.Parser);
    private pbc::RepeatedField<global::ET.Mail> mailList_ = new pbc::RepeatedField<global::ET.Mail>();
    public pbc::RepeatedField<global::ET.Mail> MailList {
      get { return mailList_; }
      set { mailList_ = value; }
    }

    private int mailCount_;
    public int MailCount {
      get { return mailCount_; }
      set {
        mailCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mailList_.WriteTo(output, _repeated_mailList_codec);
      if (MailCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MailCount);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += mailList_.CalculateSize(_repeated_mailList_codec);
      if (MailCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MailCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < mailList_.Count; i++) { MessagePool.Instance.Recycle(mailList_[i]); }
      mailList_.Clear();
      mailCount_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mailList_.AddEntriesFrom(input, _repeated_mailList_codec);
            break;
          }
          case 16: {
            MailCount = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_ReceiveAllMail : pb::IMessage {
    private static readonly pb::MessageParser<C2M_ReceiveAllMail> _parser = new pb::MessageParser<C2M_ReceiveAllMail>(() => (C2M_ReceiveAllMail)MessagePool.Instance.Fetch(typeof(C2M_ReceiveAllMail)));
    public static pb::MessageParser<C2M_ReceiveAllMail> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_ReceiveAllMail : pb::IMessage {
    private static readonly pb::MessageParser<M2C_ReceiveAllMail> _parser = new pb::MessageParser<M2C_ReceiveAllMail>(() => (M2C_ReceiveAllMail)MessagePool.Instance.Fetch(typeof(M2C_ReceiveAllMail)));
    public static pb::MessageParser<M2C_ReceiveAllMail> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.Mail> _repeated_mailList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.Mail.Parser);
    private pbc::RepeatedField<global::ET.Mail> mailList_ = new pbc::RepeatedField<global::ET.Mail>();
    public pbc::RepeatedField<global::ET.Mail> MailList {
      get { return mailList_; }
      set { mailList_ = value; }
    }

    private int mailCount_;
    public int MailCount {
      get { return mailCount_; }
      set {
        mailCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mailList_.WriteTo(output, _repeated_mailList_codec);
      if (MailCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MailCount);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += mailList_.CalculateSize(_repeated_mailList_codec);
      if (MailCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MailCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < mailList_.Count; i++) { MessagePool.Instance.Recycle(mailList_[i]); }
      mailList_.Clear();
      mailCount_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mailList_.AddEntriesFrom(input, _repeated_mailList_codec);
            break;
          }
          case 16: {
            MailCount = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_DeleteAllMail : pb::IMessage {
    private static readonly pb::MessageParser<C2M_DeleteAllMail> _parser = new pb::MessageParser<C2M_DeleteAllMail>(() => (C2M_DeleteAllMail)MessagePool.Instance.Fetch(typeof(C2M_DeleteAllMail)));
    public static pb::MessageParser<C2M_DeleteAllMail> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_DeleteAllMail : pb::IMessage {
    private static readonly pb::MessageParser<M2C_DeleteAllMail> _parser = new pb::MessageParser<M2C_DeleteAllMail>(() => (M2C_DeleteAllMail)MessagePool.Instance.Fetch(typeof(M2C_DeleteAllMail)));
    public static pb::MessageParser<M2C_DeleteAllMail> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.Mail> _repeated_mailList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.Mail.Parser);
    private pbc::RepeatedField<global::ET.Mail> mailList_ = new pbc::RepeatedField<global::ET.Mail>();
    public pbc::RepeatedField<global::ET.Mail> MailList {
      get { return mailList_; }
      set { mailList_ = value; }
    }

    private int mailCount_;
    public int MailCount {
      get { return mailCount_; }
      set {
        mailCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mailList_.WriteTo(output, _repeated_mailList_codec);
      if (MailCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MailCount);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += mailList_.CalculateSize(_repeated_mailList_codec);
      if (MailCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MailCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < mailList_.Count; i++) { MessagePool.Instance.Recycle(mailList_[i]); }
      mailList_.Clear();
      mailCount_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mailList_.AddEntriesFrom(input, _repeated_mailList_codec);
            break;
          }
          case 16: {
            MailCount = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class RankingInfo : pb::IMessage {
    private static readonly pb::MessageParser<RankingInfo> _parser = new pb::MessageParser<RankingInfo>(() => (RankingInfo)MessagePool.Instance.Fetch(typeof(RankingInfo)));
    public static pb::MessageParser<RankingInfo> Parser { get { return _parser; } }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string job_ = "";
    public string Job {
      get { return job_; }
      set {
        job_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private float value_;
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Job.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Job);
      }
      if (Value != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Job.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Job);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      job_ = "";
      value_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Job = input.ReadString();
            break;
          }
          case 29: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RankingInfo message type.</summary>
    public static class Types {
      public enum RankingType {
        Level = 0,
        Coin = 1,
        Hp = 2,
        Mp = 3,
        Pet = 4,
        Dvo = 5,
        Patk = 6,
        Matk = 7,
        PcriR = 8,
        Pcri = 9,
        McriR = 10,
        Mcri = 11,
        Pred = 12,
        Mred = 13,
      }

    }
    #endregion

  }

  public partial class C2M_GetRanking : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetRanking> _parser = new pb::MessageParser<C2M_GetRanking>(() => (C2M_GetRanking)MessagePool.Instance.Fetch(typeof(C2M_GetRanking)));
    public static pb::MessageParser<C2M_GetRanking> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      index_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetRanking : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetRanking> _parser = new pb::MessageParser<M2C_GetRanking>(() => (M2C_GetRanking)MessagePool.Instance.Fetch(typeof(M2C_GetRanking)));
    public static pb::MessageParser<M2C_GetRanking> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.RankingInfo> _repeated_rankingInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.RankingInfo.Parser);
    private pbc::RepeatedField<global::ET.RankingInfo> rankingInfoList_ = new pbc::RepeatedField<global::ET.RankingInfo>();
    public pbc::RepeatedField<global::ET.RankingInfo> RankingInfoList {
      get { return rankingInfoList_; }
      set { rankingInfoList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rankingInfoList_.WriteTo(output, _repeated_rankingInfoList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += rankingInfoList_.CalculateSize(_repeated_rankingInfoList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < rankingInfoList_.Count; i++) { MessagePool.Instance.Recycle(rankingInfoList_[i]); }
      rankingInfoList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rankingInfoList_.AddEntriesFrom(input, _repeated_rankingInfoList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_RequestChat : pb::IMessage {
    private static readonly pb::MessageParser<C2M_RequestChat> _parser = new pb::MessageParser<C2M_RequestChat>(() => (C2M_RequestChat)MessagePool.Instance.Fetch(typeof(C2M_RequestChat)));
    public static pb::MessageParser<C2M_RequestChat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ET.ChatType type_ = 0;
    public global::ET.ChatType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      content_ = "";
      id_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::ET.ChatType) input.ReadEnum();
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_RequestChat : pb::IMessage {
    private static readonly pb::MessageParser<M2C_RequestChat> _parser = new pb::MessageParser<M2C_RequestChat>(() => (M2C_RequestChat)MessagePool.Instance.Fetch(typeof(M2C_RequestChat)));
    public static pb::MessageParser<M2C_RequestChat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendNormalChat : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendNormalChat> _parser = new pb::MessageParser<M2C_SendNormalChat>(() => (M2C_SendNormalChat)MessagePool.Instance.Fetch(typeof(M2C_SendNormalChat)));
    public static pb::MessageParser<M2C_SendNormalChat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ET.ChatType type_ = 0;
    public global::ET.ChatType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      content_ = "";
      id_ = 0;
      name_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::ET.ChatType) input.ReadEnum();
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendSystemChat : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendSystemChat> _parser = new pb::MessageParser<M2C_SendSystemChat>(() => (M2C_SendSystemChat)MessagePool.Instance.Fetch(typeof(M2C_SendSystemChat)));
    public static pb::MessageParser<M2C_SendSystemChat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_contentList_codec
        = pb::FieldCodec.ForString(10);
    private pbc::RepeatedField<string> contentList_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> ContentList {
      get { return contentList_; }
      set { contentList_ = value; }
    }

    private global::ET.ChatType type_ = 0;
    public global::ET.ChatType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      contentList_.WriteTo(output, _repeated_contentList_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += contentList_.CalculateSize(_repeated_contentList_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      contentList_.Clear();
      name_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            contentList_.AddEntriesFrom(input, _repeated_contentList_codec);
            break;
          }
          case 16: {
            type_ = (global::ET.ChatType) input.ReadEnum();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
