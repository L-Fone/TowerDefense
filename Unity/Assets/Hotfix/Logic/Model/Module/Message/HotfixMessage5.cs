// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage5.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ET {

  #region Enums
  /// <summary>
  ///================商城/商店==================
  /// </summary>
  public enum MarketType {
    NoneMarket = 0,
    VoucherMarket = 1,
    YuanBaoMarket = 2,
  }

  /// <summary>
  ///任务
  /// </summary>
  public enum TaskTargetType {
    NoneTask = 0,
    /// <summary>
    ///击杀特定
    /// </summary>
    KillSpecialTask = 1,
    /// <summary>
    ///击杀任意
    /// </summary>
    KillAnyTask = 2,
    /// <summary>
    ///收集
    /// </summary>
    CollectionTask = 3,
    /// <summary>
    ///对话
    /// </summary>
    DialogTask = 4,
    /// <summary>
    ///等级
    /// </summary>
    LevelTask = 5,
    /// <summary>
    ///交物品
    /// </summary>
    SubmitTask = 6,
    /// <summary>
    ///通关（换地图）任务
    /// </summary>
    ChangeMapTask = 7,
    /// <summary>
    ///答题
    /// </summary>
    CompleteTask = 8,
  }

  public enum TaskState {
    TaskNoneState = 0,
    TaskWaiting = 1,
    TaskRunning = 2,
    TaskCompleted = 3,
  }

  #endregion

  #region Messages
  public partial class C2M_GetMarket : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetMarket> _parser = new pb::MessageParser<C2M_GetMarket>(() => (C2M_GetMarket)MessagePool.Instance.Fetch(typeof(C2M_GetMarket)));
    public static pb::MessageParser<C2M_GetMarket> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int pageIndex_;
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      pageIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetMarket : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetMarket> _parser = new pb::MessageParser<M2C_GetMarket>(() => (M2C_GetMarket)MessagePool.Instance.Fetch(typeof(M2C_GetMarket)));
    public static pb::MessageParser<M2C_GetMarket> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private float discount_;
    public float Discount {
      get { return discount_; }
      set {
        discount_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_marketIdList_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> marketIdList_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> MarketIdList {
      get { return marketIdList_; }
      set { marketIdList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Discount != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Discount);
      }
      marketIdList_.WriteTo(output, _repeated_marketIdList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Discount != 0F) {
        size += 1 + 4;
      }
      size += marketIdList_.CalculateSize(_repeated_marketIdList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      discount_ = 0f;
      marketIdList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Discount = input.ReadFloat();
            break;
          }
          case 18:
          case 16: {
            marketIdList_.AddEntriesFrom(input, _repeated_marketIdList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_BuyInShop : pb::IMessage {
    private static readonly pb::MessageParser<C2M_BuyInShop> _parser = new pb::MessageParser<C2M_BuyInShop>(() => (C2M_BuyInShop)MessagePool.Instance.Fetch(typeof(C2M_BuyInShop)));
    public static pb::MessageParser<C2M_BuyInShop> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int pageIndex_;
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    private int slotIndex_;
    public int SlotIndex {
      get { return slotIndex_; }
      set {
        slotIndex_ = value;
      }
    }

    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageIndex);
      }
      if (SlotIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotIndex);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (SlotIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotIndex);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      pageIndex_ = 0;
      slotIndex_ = 0;
      count_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 16: {
            SlotIndex = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BuyInShop : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BuyInShop> _parser = new pb::MessageParser<M2C_BuyInShop>(() => (M2C_BuyInShop)MessagePool.Instance.Fetch(typeof(M2C_BuyInShop)));
    public static pb::MessageParser<M2C_BuyInShop> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_BuyInMarket : pb::IMessage {
    private static readonly pb::MessageParser<C2M_BuyInMarket> _parser = new pb::MessageParser<C2M_BuyInMarket>(() => (C2M_BuyInMarket)MessagePool.Instance.Fetch(typeof(C2M_BuyInMarket)));
    public static pb::MessageParser<C2M_BuyInMarket> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int pageIndex_;
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    private int slotIndex_;
    public int SlotIndex {
      get { return slotIndex_; }
      set {
        slotIndex_ = value;
      }
    }

    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private global::ET.MarketType type_ = 0;
    public global::ET.MarketType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageIndex);
      }
      if (SlotIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotIndex);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (SlotIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotIndex);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      pageIndex_ = 0;
      slotIndex_ = 0;
      count_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 16: {
            SlotIndex = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            type_ = (global::ET.MarketType) input.ReadEnum();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BuyInMarket : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BuyInMarket> _parser = new pb::MessageParser<M2C_BuyInMarket>(() => (M2C_BuyInMarket)MessagePool.Instance.Fetch(typeof(M2C_BuyInMarket)));
    public static pb::MessageParser<M2C_BuyInMarket> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_SellItem : pb::IMessage {
    private static readonly pb::MessageParser<C2M_SellItem> _parser = new pb::MessageParser<C2M_SellItem>(() => (C2M_SellItem)MessagePool.Instance.Fetch(typeof(C2M_SellItem)));
    public static pb::MessageParser<C2M_SellItem> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int slotIndex_;
    public int SlotIndex {
      get { return slotIndex_; }
      set {
        slotIndex_ = value;
      }
    }

    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotIndex);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SlotIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotIndex);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      slotIndex_ = 0;
      count_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            SlotIndex = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SellItem : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SellItem> _parser = new pb::MessageParser<M2C_SellItem>(() => (M2C_SellItem)MessagePool.Instance.Fetch(typeof(M2C_SellItem)));
    public static pb::MessageParser<M2C_SellItem> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///================寄售=======================
  /// </summary>
  public partial class ConsignMap : pb::IMessage {
    private static readonly pb::MessageParser<ConsignMap> _parser = new pb::MessageParser<ConsignMap>(() => (ConsignMap)MessagePool.Instance.Fetch(typeof(ConsignMap)));
    public static pb::MessageParser<ConsignMap> Parser { get { return _parser; } }

    private long consignItemId_;
    public long ConsignItemId {
      get { return consignItemId_; }
      set {
        consignItemId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long remainTime_;
    public long RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    private global::ET.Item item_;
    public global::ET.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    private global::ET.EquipTransMessage equipTransMessage_;
    public global::ET.EquipTransMessage EquipTransMessage {
      get { return equipTransMessage_; }
      set {
        equipTransMessage_ = value;
      }
    }

    private long price_;
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConsignItemId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ConsignItemId);
      }
      if (UnitId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnitId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (RemainTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RemainTime);
      }
      if (item_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Item);
      }
      if (equipTransMessage_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EquipTransMessage);
      }
      if (Price != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Price);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ConsignItemId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConsignItemId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (RemainTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemainTime);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (equipTransMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquipTransMessage);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      consignItemId_ = 0;
      unitId_ = 0;
      name_ = "";
      remainTime_ = 0;
      if (item_ != null) MessagePool.Instance.Recycle(item_); item_ = null;
      if (equipTransMessage_ != null) MessagePool.Instance.Recycle(equipTransMessage_); equipTransMessage_ = null;
      price_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConsignItemId = input.ReadInt64();
            break;
          }
          case 16: {
            UnitId = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            RemainTime = input.ReadInt64();
            break;
          }
          case 42: {
            if (item_ == null) {
              item_ = new global::ET.Item();
            }
            input.ReadMessage(item_);
            break;
          }
          case 50: {
            if (equipTransMessage_ == null) {
              equipTransMessage_ = new global::ET.EquipTransMessage();
            }
            input.ReadMessage(equipTransMessage_);
            break;
          }
          case 56: {
            Price = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetConsignment : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetConsignment> _parser = new pb::MessageParser<C2M_GetConsignment>(() => (C2M_GetConsignment)MessagePool.Instance.Fetch(typeof(C2M_GetConsignment)));
    public static pb::MessageParser<C2M_GetConsignment> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ET.JobType jobType_ = 0;
    public global::ET.JobType JobType {
      get { return jobType_; }
      set {
        jobType_ = value;
      }
    }

    private global::ET.ItemType itemType_ = 0;
    public global::ET.ItemType ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    private int page_;
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (JobType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) JobType);
      }
      if (ItemType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ItemType);
      }
      if (Page != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Page);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (JobType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JobType);
      }
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemType);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      page_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            jobType_ = (global::ET.JobType) input.ReadEnum();
            break;
          }
          case 16: {
            itemType_ = (global::ET.ItemType) input.ReadEnum();
            break;
          }
          case 24: {
            Page = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetConsignment : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetConsignment> _parser = new pb::MessageParser<M2C_GetConsignment>(() => (M2C_GetConsignment)MessagePool.Instance.Fetch(typeof(M2C_GetConsignment)));
    public static pb::MessageParser<M2C_GetConsignment> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int totalPage_;
    public int TotalPage {
      get { return totalPage_; }
      set {
        totalPage_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ET.ConsignMap> _repeated_consignMapList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.ConsignMap.Parser);
    private pbc::RepeatedField<global::ET.ConsignMap> consignMapList_ = new pbc::RepeatedField<global::ET.ConsignMap>();
    public pbc::RepeatedField<global::ET.ConsignMap> ConsignMapList {
      get { return consignMapList_; }
      set { consignMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalPage);
      }
      consignMapList_.WriteTo(output, _repeated_consignMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (TotalPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPage);
      }
      size += consignMapList_.CalculateSize(_repeated_consignMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      totalPage_ = 0;
      for (int i = 0; i < consignMapList_.Count; i++) { MessagePool.Instance.Recycle(consignMapList_[i]); }
      consignMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalPage = input.ReadInt32();
            break;
          }
          case 18: {
            consignMapList_.AddEntriesFrom(input, _repeated_consignMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_PutInConsignment : pb::IMessage {
    private static readonly pb::MessageParser<C2M_PutInConsignment> _parser = new pb::MessageParser<C2M_PutInConsignment>(() => (C2M_PutInConsignment)MessagePool.Instance.Fetch(typeof(C2M_PutInConsignment)));
    public static pb::MessageParser<C2M_PutInConsignment> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int index_;
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    private long price_;
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Price != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Price);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      index_ = 0;
      price_ = 0;
      count_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Price = input.ReadInt64();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PutInConsignment : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PutInConsignment> _parser = new pb::MessageParser<M2C_PutInConsignment>(() => (M2C_PutInConsignment)MessagePool.Instance.Fetch(typeof(M2C_PutInConsignment)));
    public static pb::MessageParser<M2C_PutInConsignment> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_BuyInConsignment : pb::IMessage {
    private static readonly pb::MessageParser<C2M_BuyInConsignment> _parser = new pb::MessageParser<C2M_BuyInConsignment>(() => (C2M_BuyInConsignment)MessagePool.Instance.Fetch(typeof(C2M_BuyInConsignment)));
    public static pb::MessageParser<C2M_BuyInConsignment> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long consignmentId_;
    public long ConsignmentId {
      get { return consignmentId_; }
      set {
        consignmentId_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConsignmentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ConsignmentId);
      }
      if (UnitId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (ConsignmentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConsignmentId);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      consignmentId_ = 0;
      unitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConsignmentId = input.ReadInt64();
            break;
          }
          case 16: {
            UnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BuyInConsignment : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BuyInConsignment> _parser = new pb::MessageParser<M2C_BuyInConsignment>(() => (M2C_BuyInConsignment)MessagePool.Instance.Fetch(typeof(M2C_BuyInConsignment)));
    public static pb::MessageParser<M2C_BuyInConsignment> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///================仓库=======================
  /// </summary>
  public partial class M2C_OpenStoreUI : pb::IMessage {
    private static readonly pb::MessageParser<M2C_OpenStoreUI> _parser = new pb::MessageParser<M2C_OpenStoreUI>(() => (M2C_OpenStoreUI)MessagePool.Instance.Fetch(typeof(M2C_OpenStoreUI)));
    public static pb::MessageParser<M2C_OpenStoreUI> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetStore : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetStore> _parser = new pb::MessageParser<C2M_GetStore>(() => (C2M_GetStore)MessagePool.Instance.Fetch(typeof(C2M_GetStore)));
    public static pb::MessageParser<C2M_GetStore> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int page_;
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Page);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      page_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Page = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetStore : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetStore> _parser = new pb::MessageParser<M2C_GetStore>(() => (M2C_GetStore)MessagePool.Instance.Fetch(typeof(M2C_GetStore)));
    public static pb::MessageParser<M2C_GetStore> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_storeList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> storeList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> StoreList {
      get { return storeList_; }
      set { storeList_ = value; }
    }

    private long coin_;
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      storeList_.WriteTo(output, _repeated_storeList_codec);
      if (Coin != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Coin);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += storeList_.CalculateSize(_repeated_storeList_codec);
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < storeList_.Count; i++) { MessagePool.Instance.Recycle(storeList_[i]); }
      storeList_.Clear();
      coin_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            storeList_.AddEntriesFrom(input, _repeated_storeList_codec);
            break;
          }
          case 16: {
            Coin = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_SortStore : pb::IMessage {
    private static readonly pb::MessageParser<C2M_SortStore> _parser = new pb::MessageParser<C2M_SortStore>(() => (C2M_SortStore)MessagePool.Instance.Fetch(typeof(C2M_SortStore)));
    public static pb::MessageParser<C2M_SortStore> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int page_;
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Page);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      page_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Page = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SortStore : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SortStore> _parser = new pb::MessageParser<M2C_SortStore>(() => (M2C_SortStore)MessagePool.Instance.Fetch(typeof(M2C_SortStore)));
    public static pb::MessageParser<M2C_SortStore> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_storeList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> storeList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> StoreList {
      get { return storeList_; }
      set { storeList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      storeList_.WriteTo(output, _repeated_storeList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += storeList_.CalculateSize(_repeated_storeList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < storeList_.Count; i++) { MessagePool.Instance.Recycle(storeList_[i]); }
      storeList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            storeList_.AddEntriesFrom(input, _repeated_storeList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_PutInStore : pb::IMessage {
    private static readonly pb::MessageParser<C2M_PutInStore> _parser = new pb::MessageParser<C2M_PutInStore>(() => (C2M_PutInStore)MessagePool.Instance.Fetch(typeof(C2M_PutInStore)));
    public static pb::MessageParser<C2M_PutInStore> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int bagIndex_;
    public int BagIndex {
      get { return bagIndex_; }
      set {
        bagIndex_ = value;
      }
    }

    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private int page_;
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BagIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BagIndex);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Page != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Page);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (BagIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BagIndex);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      bagIndex_ = 0;
      count_ = 0;
      page_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BagIndex = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Page = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PutInStore : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PutInStore> _parser = new pb::MessageParser<M2C_PutInStore>(() => (M2C_PutInStore)MessagePool.Instance.Fetch(typeof(M2C_PutInStore)));
    public static pb::MessageParser<M2C_PutInStore> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_storeList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> storeList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> StoreList {
      get { return storeList_; }
      set { storeList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      storeList_.WriteTo(output, _repeated_storeList_codec);
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += storeList_.CalculateSize(_repeated_storeList_codec);
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < storeList_.Count; i++) { MessagePool.Instance.Recycle(storeList_[i]); }
      storeList_.Clear();
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            storeList_.AddEntriesFrom(input, _repeated_storeList_codec);
            break;
          }
          case 18: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TakeOffStore : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TakeOffStore> _parser = new pb::MessageParser<C2M_TakeOffStore>(() => (C2M_TakeOffStore)MessagePool.Instance.Fetch(typeof(C2M_TakeOffStore)));
    public static pb::MessageParser<C2M_TakeOffStore> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int storeIndex_;
    public int StoreIndex {
      get { return storeIndex_; }
      set {
        storeIndex_ = value;
      }
    }

    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private int page_;
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StoreIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StoreIndex);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Page != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Page);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (StoreIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StoreIndex);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      storeIndex_ = 0;
      count_ = 0;
      page_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StoreIndex = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Page = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TakeOffStore : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TakeOffStore> _parser = new pb::MessageParser<M2C_TakeOffStore>(() => (M2C_TakeOffStore)MessagePool.Instance.Fetch(typeof(M2C_TakeOffStore)));
    public static pb::MessageParser<M2C_TakeOffStore> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_storeList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> storeList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> StoreList {
      get { return storeList_; }
      set { storeList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      storeList_.WriteTo(output, _repeated_storeList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      size += storeList_.CalculateSize(_repeated_storeList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      for (int i = 0; i < storeList_.Count; i++) { MessagePool.Instance.Recycle(storeList_[i]); }
      storeList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 18: {
            storeList_.AddEntriesFrom(input, _repeated_storeList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_PutCoinInStore : pb::IMessage {
    private static readonly pb::MessageParser<C2M_PutCoinInStore> _parser = new pb::MessageParser<C2M_PutCoinInStore>(() => (C2M_PutCoinInStore)MessagePool.Instance.Fetch(typeof(C2M_PutCoinInStore)));
    public static pb::MessageParser<C2M_PutCoinInStore> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long coin_;
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Coin != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Coin);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      coin_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Coin = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PutCoinInStore : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PutCoinInStore> _parser = new pb::MessageParser<M2C_PutCoinInStore>(() => (M2C_PutCoinInStore)MessagePool.Instance.Fetch(typeof(M2C_PutCoinInStore)));
    public static pb::MessageParser<M2C_PutCoinInStore> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long coin_;
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Coin != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Coin);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      coin_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Coin = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TakeCoinOutStore : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TakeCoinOutStore> _parser = new pb::MessageParser<C2M_TakeCoinOutStore>(() => (C2M_TakeCoinOutStore)MessagePool.Instance.Fetch(typeof(C2M_TakeCoinOutStore)));
    public static pb::MessageParser<C2M_TakeCoinOutStore> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long coin_;
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Coin != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Coin);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      coin_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Coin = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TakeCoinOutStore : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TakeCoinOutStore> _parser = new pb::MessageParser<M2C_TakeCoinOutStore>(() => (M2C_TakeCoinOutStore)MessagePool.Instance.Fetch(typeof(M2C_TakeCoinOutStore)));
    public static pb::MessageParser<M2C_TakeCoinOutStore> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long coin_;
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Coin != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Coin);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      coin_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Coin = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///================打造=======================
  /// </summary>
  public partial class C2M_ForgeEquip : pb::IMessage {
    private static readonly pb::MessageParser<C2M_ForgeEquip> _parser = new pb::MessageParser<C2M_ForgeEquip>(() => (C2M_ForgeEquip)MessagePool.Instance.Fetch(typeof(C2M_ForgeEquip)));
    public static pb::MessageParser<C2M_ForgeEquip> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_ForgeEquip : pb::IMessage {
    private static readonly pb::MessageParser<M2C_ForgeEquip> _parser = new pb::MessageParser<M2C_ForgeEquip>(() => (M2C_ForgeEquip)MessagePool.Instance.Fetch(typeof(M2C_ForgeEquip)));
    public static pb::MessageParser<M2C_ForgeEquip> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///================NPC========================
  /// </summary>
  public partial class C2M_ClickNPC : pb::IMessage {
    private static readonly pb::MessageParser<C2M_ClickNPC> _parser = new pb::MessageParser<C2M_ClickNPC>(() => (C2M_ClickNPC)MessagePool.Instance.Fetch(typeof(C2M_ClickNPC)));
    public static pb::MessageParser<C2M_ClickNPC> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int nPCId_;
    public int NPCId {
      get { return nPCId_; }
      set {
        nPCId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NPCId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NPCId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (NPCId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPCId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      nPCId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NPCId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_ClickNPC : pb::IMessage {
    private static readonly pb::MessageParser<M2C_ClickNPC> _parser = new pb::MessageParser<M2C_ClickNPC>(() => (M2C_ClickNPC)MessagePool.Instance.Fetch(typeof(M2C_ClickNPC)));
    public static pb::MessageParser<M2C_ClickNPC> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_OpenMeltEquipUI : pb::IMessage {
    private static readonly pb::MessageParser<M2C_OpenMeltEquipUI> _parser = new pb::MessageParser<M2C_OpenMeltEquipUI>(() => (M2C_OpenMeltEquipUI)MessagePool.Instance.Fetch(typeof(M2C_OpenMeltEquipUI)));
    public static pb::MessageParser<M2C_OpenMeltEquipUI> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_OpenShopUI : pb::IMessage {
    private static readonly pb::MessageParser<M2C_OpenShopUI> _parser = new pb::MessageParser<M2C_OpenShopUI>(() => (M2C_OpenShopUI)MessagePool.Instance.Fetch(typeof(M2C_OpenShopUI)));
    public static pb::MessageParser<M2C_OpenShopUI> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_OpenConsignmentUI : pb::IMessage {
    private static readonly pb::MessageParser<M2C_OpenConsignmentUI> _parser = new pb::MessageParser<M2C_OpenConsignmentUI>(() => (M2C_OpenConsignmentUI)MessagePool.Instance.Fetch(typeof(M2C_OpenConsignmentUI)));
    public static pb::MessageParser<M2C_OpenConsignmentUI> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int totalPage_;
    public int TotalPage {
      get { return totalPage_; }
      set {
        totalPage_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ET.ConsignMap> _repeated_consignMapList_codec
        = pb::FieldCodec.ForMessage(18, global::ET.ConsignMap.Parser);
    private pbc::RepeatedField<global::ET.ConsignMap> consignMapList_ = new pbc::RepeatedField<global::ET.ConsignMap>();
    public pbc::RepeatedField<global::ET.ConsignMap> ConsignMapList {
      get { return consignMapList_; }
      set { consignMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalPage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalPage);
      }
      consignMapList_.WriteTo(output, _repeated_consignMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TotalPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPage);
      }
      size += consignMapList_.CalculateSize(_repeated_consignMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      totalPage_ = 0;
      for (int i = 0; i < consignMapList_.Count; i++) { MessagePool.Instance.Recycle(consignMapList_[i]); }
      consignMapList_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalPage = input.ReadInt32();
            break;
          }
          case 18: {
            consignMapList_.AddEntriesFrom(input, _repeated_consignMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_OpenForgeUI : pb::IMessage {
    private static readonly pb::MessageParser<M2C_OpenForgeUI> _parser = new pb::MessageParser<M2C_OpenForgeUI>(() => (M2C_OpenForgeUI)MessagePool.Instance.Fetch(typeof(M2C_OpenForgeUI)));
    public static pb::MessageParser<M2C_OpenForgeUI> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///熔炼
  /// </summary>
  public partial class C2M_MeltEquip : pb::IMessage {
    private static readonly pb::MessageParser<C2M_MeltEquip> _parser = new pb::MessageParser<C2M_MeltEquip>(() => (C2M_MeltEquip)MessagePool.Instance.Fetch(typeof(C2M_MeltEquip)));
    public static pb::MessageParser<C2M_MeltEquip> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int equipIndex_;
    public int EquipIndex {
      get { return equipIndex_; }
      set {
        equipIndex_ = value;
      }
    }

    private int gemIndex_;
    public int GemIndex {
      get { return gemIndex_; }
      set {
        gemIndex_ = value;
      }
    }

    private int attributeIndex_;
    public int AttributeIndex {
      get { return attributeIndex_; }
      set {
        attributeIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EquipIndex);
      }
      if (GemIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GemIndex);
      }
      if (AttributeIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AttributeIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (EquipIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipIndex);
      }
      if (GemIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GemIndex);
      }
      if (AttributeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttributeIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      equipIndex_ = 0;
      gemIndex_ = 0;
      attributeIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipIndex = input.ReadInt32();
            break;
          }
          case 16: {
            GemIndex = input.ReadInt32();
            break;
          }
          case 24: {
            AttributeIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MeltEquip : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MeltEquip> _parser = new pb::MessageParser<M2C_MeltEquip>(() => (M2C_MeltEquip)MessagePool.Instance.Fetch(typeof(M2C_MeltEquip)));
    public static pb::MessageParser<M2C_MeltEquip> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.BagMap> _repeated_bagMapList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.BagMap.Parser);
    private pbc::RepeatedField<global::ET.BagMap> bagMapList_ = new pbc::RepeatedField<global::ET.BagMap>();
    public pbc::RepeatedField<global::ET.BagMap> BagMapList {
      get { return bagMapList_; }
      set { bagMapList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bagMapList_.WriteTo(output, _repeated_bagMapList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += bagMapList_.CalculateSize(_repeated_bagMapList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < bagMapList_.Count; i++) { MessagePool.Instance.Recycle(bagMapList_[i]); }
      bagMapList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bagMapList_.AddEntriesFrom(input, _repeated_bagMapList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class TansferTask : pb::IMessage {
    private static readonly pb::MessageParser<TansferTask> _parser = new pb::MessageParser<TansferTask>(() => (TansferTask)MessagePool.Instance.Fetch(typeof(TansferTask)));
    public static pb::MessageParser<TansferTask> Parser { get { return _parser; } }

    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_currCompleteList_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> currCompleteList_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> CurrCompleteList {
      get { return currCompleteList_; }
      set { currCompleteList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      currCompleteList_.WriteTo(output, _repeated_currCompleteList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += currCompleteList_.CalculateSize(_repeated_currCompleteList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      currCompleteList_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            currCompleteList_.AddEntriesFrom(input, _repeated_currCompleteList_codec);
            break;
          }
        }
      }
    }

  }

  public partial class NPCTask : pb::IMessage {
    private static readonly pb::MessageParser<NPCTask> _parser = new pb::MessageParser<NPCTask>(() => (NPCTask)MessagePool.Instance.Fetch(typeof(NPCTask)));
    public static pb::MessageParser<NPCTask> Parser { get { return _parser; } }

    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private global::ET.TaskState taskState_ = 0;
    public global::ET.TaskState TaskState {
      get { return taskState_; }
      set {
        taskState_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (TaskState != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TaskState);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (TaskState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TaskState);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            taskState_ = (global::ET.TaskState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_OpenTaskUI : pb::IMessage {
    private static readonly pb::MessageParser<M2C_OpenTaskUI> _parser = new pb::MessageParser<M2C_OpenTaskUI>(() => (M2C_OpenTaskUI)MessagePool.Instance.Fetch(typeof(M2C_OpenTaskUI)));
    public static pb::MessageParser<M2C_OpenTaskUI> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ET.NPCTask> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.NPCTask.Parser);
    private pbc::RepeatedField<global::ET.NPCTask> taskList_ = new pbc::RepeatedField<global::ET.NPCTask>();
    public pbc::RepeatedField<global::ET.NPCTask> TaskList {
      get { return taskList_; }
      set { taskList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      taskList_.WriteTo(output, _repeated_taskList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < taskList_.Count; i++) { MessagePool.Instance.Recycle(taskList_[i]); }
      taskList_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_AcceptTask : pb::IMessage {
    private static readonly pb::MessageParser<C2M_AcceptTask> _parser = new pb::MessageParser<C2M_AcceptTask>(() => (C2M_AcceptTask)MessagePool.Instance.Fetch(typeof(C2M_AcceptTask)));
    public static pb::MessageParser<C2M_AcceptTask> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int taskId_;
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      taskId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_AcceptTask : pb::IMessage {
    private static readonly pb::MessageParser<M2C_AcceptTask> _parser = new pb::MessageParser<M2C_AcceptTask>(() => (M2C_AcceptTask)MessagePool.Instance.Fetch(typeof(M2C_AcceptTask)));
    public static pb::MessageParser<M2C_AcceptTask> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_CompleteTask : pb::IMessage {
    private static readonly pb::MessageParser<C2M_CompleteTask> _parser = new pb::MessageParser<C2M_CompleteTask>(() => (C2M_CompleteTask)MessagePool.Instance.Fetch(typeof(C2M_CompleteTask)));
    public static pb::MessageParser<C2M_CompleteTask> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int taskId_;
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_indexList_codec
        = pb::FieldCodec.ForInt32(18);
    private pbc::RepeatedField<int> indexList_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> IndexList {
      get { return indexList_; }
      set { indexList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      indexList_.WriteTo(output, _repeated_indexList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      size += indexList_.CalculateSize(_repeated_indexList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      taskId_ = 0;
      indexList_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            indexList_.AddEntriesFrom(input, _repeated_indexList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_CompleteTask : pb::IMessage {
    private static readonly pb::MessageParser<M2C_CompleteTask> _parser = new pb::MessageParser<M2C_CompleteTask>(() => (M2C_CompleteTask)MessagePool.Instance.Fetch(typeof(M2C_CompleteTask)));
    public static pb::MessageParser<M2C_CompleteTask> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetTask : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetTask> _parser = new pb::MessageParser<C2M_GetTask>(() => (C2M_GetTask)MessagePool.Instance.Fetch(typeof(C2M_GetTask)));
    public static pb::MessageParser<C2M_GetTask> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetTask : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetTask> _parser = new pb::MessageParser<M2C_GetTask>(() => (M2C_GetTask)MessagePool.Instance.Fetch(typeof(M2C_GetTask)));
    public static pb::MessageParser<M2C_GetTask> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.TansferTask> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.TansferTask.Parser);
    private pbc::RepeatedField<global::ET.TansferTask> taskList_ = new pbc::RepeatedField<global::ET.TansferTask>();
    public pbc::RepeatedField<global::ET.TansferTask> TaskList {
      get { return taskList_; }
      set { taskList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      taskList_.WriteTo(output, _repeated_taskList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < taskList_.Count; i++) { MessagePool.Instance.Recycle(taskList_[i]); }
      taskList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GetTaskState : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GetTaskState> _parser = new pb::MessageParser<C2M_GetTaskState>(() => (C2M_GetTaskState)MessagePool.Instance.Fetch(typeof(C2M_GetTaskState)));
    public static pb::MessageParser<C2M_GetTaskState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GetTaskState : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GetTaskState> _parser = new pb::MessageParser<M2C_GetTaskState>(() => (M2C_GetTaskState)MessagePool.Instance.Fetch(typeof(M2C_GetTaskState)));
    public static pb::MessageParser<M2C_GetTaskState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ET.NPCTask> _repeated_nPCStateList_codec
        = pb::FieldCodec.ForMessage(10, global::ET.NPCTask.Parser);
    private pbc::RepeatedField<global::ET.NPCTask> nPCStateList_ = new pbc::RepeatedField<global::ET.NPCTask>();
    public pbc::RepeatedField<global::ET.NPCTask> NPCStateList {
      get { return nPCStateList_; }
      set { nPCStateList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      nPCStateList_.WriteTo(output, _repeated_nPCStateList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += nPCStateList_.CalculateSize(_repeated_nPCStateList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < nPCStateList_.Count; i++) { MessagePool.Instance.Recycle(nPCStateList_[i]); }
      nPCStateList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            nPCStateList_.AddEntriesFrom(input, _repeated_nPCStateList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SendTaskState : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SendTaskState> _parser = new pb::MessageParser<M2C_SendTaskState>(() => (M2C_SendTaskState)MessagePool.Instance.Fetch(typeof(M2C_SendTaskState)));
    public static pb::MessageParser<M2C_SendTaskState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ET.NPCTask nPCState_;
    public global::ET.NPCTask NPCState {
      get { return nPCState_; }
      set {
        nPCState_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (nPCState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NPCState);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (nPCState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NPCState);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (nPCState_ != null) MessagePool.Instance.Recycle(nPCState_); nPCState_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (nPCState_ == null) {
              nPCState_ = new global::ET.NPCTask();
            }
            input.ReadMessage(nPCState_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
